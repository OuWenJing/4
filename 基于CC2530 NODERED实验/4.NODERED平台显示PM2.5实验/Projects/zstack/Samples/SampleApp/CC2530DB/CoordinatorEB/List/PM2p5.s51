///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        20/May/2023  23:19:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530          /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Components /
//                          \HARDWARE\PM2p5.c                                 /
//    Command line       =  -f "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530      /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wCoord.cfg" (-DCPU32MHZ                 /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wConfig.cfg" (-DSECURE=0                /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF11                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à /
//                          ½Ì³Ì\»ùÓÚCC2530 NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2. /
//                          5ÊµÑé\Components\HARDWARE\PM2p5.c" -D ZIGBEEPRO   /
//                          -D ZTOOL_P1 -D MT_SYS_FUNC -D xMT_ZDO_FUNC -D     /
//                          LCD_SUPPORTED=DEBUG -D NV_RESTORE -lC             /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\CoordinatorEB\Li /
//                          st\" -lA "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC253 /
//                          0 NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          List\" --diag_suppress Pe001,Pa010 -o             /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\CoordinatorEB\Ob /
//                          j\" -e --debug --core=plain --dptr=16,1           /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530      /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\" -I             /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I   /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\T /
//                          I2530DB\" -I "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚC /
//                          C2530 NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MT\" -I                           /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HAL\INCLUDE\" -I                        /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HAL\TARGET\CC2530EB\" -I                /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\MCU\CCSOC\" -I                     /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\OSAL\INCLUDE\" -I                       /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\AF\" -I                           /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\NWK\" -I                          /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SEC\" -I                          /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SAPI\" -I                         /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\SYS\" -I                          /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\STACK\ZDO\" -I                          /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\ZMAC\F8W\" -I                           /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\ZMAC\" -I "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³ /
//                          Ì\»ùÓÚCC2530 NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5Êµ /
//                          Ñé\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\" -I        /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\SERVICES\SDATA\" -I                     /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\INCLUDE\" -I                        /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\HIGH_LEVEL\" -I                     /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\" -I                /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I    /
//                          "D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530         /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\HARDWARE\" -Ohz                         /
//    List file          =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530          /
//                          NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\CoordinatorEB\Li /
//                          st\PM2p5.s51                                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME PM2p5

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?SS_SHR
        EXTERN ?UL_TO_FLT
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Dealy_10ms?relay
        FUNCTION ??Dealy_10ms?relay,0203H
        PUBLIC ??Delay_280us?relay
        FUNCTION ??Delay_280us?relay,0203H
        PUBLIC ??PM2p5_ADC?relay
        FUNCTION ??PM2p5_ADC?relay,0203H
        PUBLIC ??PM2p5_Init?relay
        FUNCTION ??PM2p5_Init?relay,0203H
        PUBLIC ??PM2p5_Read?relay
        FUNCTION ??PM2p5_Read?relay,0203H
        PUBLIC ??bubbleSort?relay
        FUNCTION ??bubbleSort?relay,0203H
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK APCFG
        PUBLIC Dealy_10ms
        FUNCTION Dealy_10ms,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC Delay_280us
        FUNCTION Delay_280us,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC PM2p5_ADC
        FUNCTION PM2p5_ADC,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC PM2p5_Init
        FUNCTION PM2p5_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC PM2p5_Read
        FUNCTION PM2p5_Read,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_3a000000
        PUBWEAK __Constant_3e051eb8
        PUBWEAK __Constant_40533333
        PUBWEAK __Constant_447a0000
        PUBLIC bubbleSort
        FUNCTION bubbleSort,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC voltage
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
printf              SYMBOL "printf"
??printf?relay      SYMBOL "?relay", printf
Dealy_10ms          SYMBOL "Dealy_10ms"
??Dealy_10ms?relay  SYMBOL "?relay", Dealy_10ms
Delay_280us         SYMBOL "Delay_280us"
??Delay_280us?relay SYMBOL "?relay", Delay_280us
PM2p5_ADC           SYMBOL "PM2p5_ADC"
??PM2p5_ADC?relay   SYMBOL "?relay", PM2p5_ADC
PM2p5_Init          SYMBOL "PM2p5_Init"
??PM2p5_Init?relay  SYMBOL "?relay", PM2p5_Init
PM2p5_Read          SYMBOL "PM2p5_Read"
??PM2p5_Read?relay  SYMBOL "?relay", PM2p5_Read
bubbleSort          SYMBOL "bubbleSort"
??bubbleSort?relay  SYMBOL "?relay", bubbleSort

        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H

// D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\»ùÓÚCC2530 NODEREDÊµÑé\4.NODEREDÆ½Ì¨ÏÔÊ¾PM2.5ÊµÑé\Components\HARDWARE\PM2p5.c
//    1 #include "ioCC2530.h"      

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr APCFG
APCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    2 #include "stdio.h"
//    3 #include "PM2p5.h"
//    4 #include "sampleApp.h"
//    5 #define SAMPLE_SIZE 20

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//    6 static uint16_t ADC_Sum,ADC_Value,i;
ADC_Sum:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
ADC_Value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
i:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//    7 static uint16_t PM2p5_ugm3 = 0;
PM2p5_ugm3:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    8 static int PM2P5_ADC[SAMPLE_SIZE],PM2P5_ADC_Count = 0;
PM2P5_ADC:
        DS 40
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
PM2P5_ADC_Count:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//    9 float voltage = 0;
voltage:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   10 //==========================================================
//   11 //	º¯ÊýÃû³Æ£º	void PM2p5_Init(void)
//   12 //
//   13 //	º¯Êý¹¦ÄÜ£º	³õÊ¼PM2.5Ä£¿é
//   14 //
//   15 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   16 //
//   17 //	·µ»Ø²ÎÊý£º	ÎÞ
//   18 //
//   19 //	ËµÃ÷£º		
//   20 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   21 void PM2p5_Init(void)
PM2p5_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function PM2p5_Init
        CODE
//   22 {
        ; Saved register size: 0
        ; Auto size: 0
//   23 	APCFG |= BV(2);	
        ORL     0xf2,#0x4
//   24 	P0SEL |= BV(2);        //Æ¬ÉÏÍâÉè
        ORL     0xf3,#0x4
//   25 	P0DIR &= ~(BV(2));    //ÉèÖÃÊäÈëÄ£Ê½	
        ANL     0xfd,#0xfb
//   26 	
//   27 	P1SEL &= ~BV(0);
        ANL     0xf4,#0xfe
//   28 	P1DIR |= BV(0);
        ORL     0xfe,#0x1
//   29 	PM2P5_LED_ENABLE();
        SETB    0x90.0
//   30 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE APCFG
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1
//   31 //==========================================================
//   32 //	º¯ÊýÃû³Æ£º	uint16 PM2p5_ADC(void)
//   33 //
//   34 //	º¯Êý¹¦ÄÜ£º	PM2.5Ä£¿éµÄADC²É¼¯Öµ
//   35 //
//   36 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   37 //
//   38 //	·µ»Ø²ÎÊý£º	ÎÞ
//   39 //
//   40 //	ËµÃ÷£º		
//   41 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   42 uint16 PM2p5_ADC(void)
PM2p5_ADC:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function PM2p5_ADC
        CODE
//   43 {
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   44 	short value=0;
//   45 	ADCCON3 = (0x80 | 0x30 | 0x02);
        MOV     0xb6,#-0x4e
//   46 	ADCCON1 |= 0x30;     //Ñ¡ÔñADCµÄÆô¶¯Ä£Ê½ÎªÊÖ¶¯
        ORL     0xb4,#0x30
//   47 	ADCCON1 |= 0x40;       //Æô¶¯AD×ª»¯             
        ORL     0xb4,#0x40
//   48 	
//   49 	while(!(ADCCON1 & 0x80));    //µÈ´ýADC×ª»¯½áÊø
??PM2p5_ADC_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??PM2p5_ADC_0
//   50 	
//   51 	value  =  ADCL;
        MOV     A,0xba
        MOV     ?V0 + 0,A
//   52 	value |= (ADCH << 8);    //È¡µÃ×îÖÕ×ª»¯½á¹û£¬´æÈëvalueÖÐ  
        MOV     A,0xbb
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     ?V0 + 1,A
//   53 	if(value<0){
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??PM2p5_ADC_1
//   54 		value = 0;
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R0
//   55 	}
//   56 	value  = value>>4;	
//   57 	return value;
??PM2p5_ADC_1:
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-4
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//   58 }
//   59 //==========================================================
//   60 //	º¯ÊýÃû³Æ£º	void Delay_280us(void)
//   61 //
//   62 //	º¯Êý¹¦ÄÜ£º	280usÑÓÊ±
//   63 //
//   64 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   65 //
//   66 //	·µ»Ø²ÎÊý£º	ÎÞ
//   67 //
//   68 //	ËµÃ÷£º		
//   69 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 void Delay_280us(void)
Delay_280us:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Delay_280us
        CODE
//   71 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
//   72 	volatile int count = 100;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x64
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   73 	while(count--);
??Delay_280us_0:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??Delay_280us_0
        CFI EndBlock cfiBlock2
//   74 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//   75 //==========================================================
//   76 //	º¯ÊýÃû³Æ£º	void Dealy_10ms(void)
//   77 //
//   78 //	º¯Êý¹¦ÄÜ£º	10msÑÓÊ±
//   79 //
//   80 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   81 //
//   82 //	·µ»Ø²ÎÊý£º	ÎÞ
//   83 //
//   84 //	ËµÃ÷£º		
//   85 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 void Dealy_10ms(void)
Dealy_10ms:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Dealy_10ms
        CODE
//   87 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
//   88 	volatile int  count = 4300;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x34
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x10
        MOVX    @DPTR,A
//   89 	while(count--);
??Dealy_10ms_0:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JNZ     ??Dealy_10ms_0
//   90 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//   91 //==========================================================
//   92 //	º¯ÊýÃû³Æ£º	void bubbleSort(int arr[], int n)
//   93 //
//   94 //	º¯Êý¹¦ÄÜ£º	ÊµÏÖÓÉÐ¡µ½´óµÄÅÅ
//   95 //
//   96 //	Èë¿Ú²ÎÊý£º	@arr£¬Òª½øÐÐÅÅÐòµÄÊý×é
//   97 //					    @n,ÅÅÐòµÄÊý×é´óÐ¡
//   98 //
//   99 //	·µ»Ø²ÎÊý£º	ÎÞ
//  100 //
//  101 //	ËµÃ÷£º		
//  102 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  103 void bubbleSort(int arr[], int n)
bubbleSort:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function bubbleSort
        CODE
//  104 {
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  105     int i, j, tmp;
//  106 
//  107     for(i = 0; i < n - 1; i++){
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??bubbleSort_0
//  108         for(j = 1; j < n; j++){
//  109             if(arr[j] < arr[j - 1]){
??bubbleSort_1:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        MOV     A,R3
        RLC     A
        MOV     R3,A
        MOV     A,R6
        ADD     A,R2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R2
        ADD     A,#-0x2
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     DPH,R3
        MOV     DPL,R2
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??bubbleSort_2
//  110                 tmp        = arr[j];
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  111                 arr[j]     = arr[j - 1];
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  112                 arr[j - 1] = tmp;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  113             }
//  114         }
??bubbleSort_2:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??bubbleSort_3:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??bubbleSort_1
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??bubbleSort_0:
        MOV     A,R4
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     A,?V0 + 3
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??bubbleSort_4
        MOV     R0,#0x1
        MOV     R1,#0x0
        SJMP    ??bubbleSort_3
//  115     }
//  116 }
??bubbleSort_4:
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  117 uint16_t PM2p5_Read(void)
PM2p5_Read:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function PM2p5_Read
        CODE
//  118 {
        FUNCALL PM2p5_Read, Delay_280us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PM2p5_Read, PM2p5_ADC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PM2p5_Read, Dealy_10ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PM2p5_Read, bubbleSort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PM2p5_Read, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  119 		/*½øÐÐ²É¼¯*/
//  120 		for(PM2P5_ADC_Count = 0;PM2P5_ADC_Count<SAMPLE_SIZE;PM2P5_ADC_Count++){
        MOV     DPTR,#PM2P5_ADC_Count
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  121 			PM2P5_LED_ENABLE();
??PM2p5_Read_0:
        SETB    0x90.0
//  122 			Delay_280us();//ÑÓÊ±280us
        ; Setup parameters for call to function Delay_280us
        LCALL   ??Delay_280us?relay
//  123 			PM2P5_ADC[PM2P5_ADC_Count++] = PM2p5_ADC();//ADCÖµ±£´æµ½Êý¾ÝÖÐ
        MOV     DPTR,#PM2P5_ADC_Count
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        ; Setup parameters for call to function PM2p5_ADC
        LCALL   ??PM2p5_ADC?relay
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  124 			PM2P5_LED_DISABLE();
        CLR     0x90.0
//  125 			Dealy_10ms();//ÑÓÊ±10ms
        ; Setup parameters for call to function Dealy_10ms
        LCALL   ??Dealy_10ms?relay
//  126 		}
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#PM2P5_ADC_Count
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#PM2P5_ADC_Count
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x14
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??PM2p5_Read_0
//  127 		bubbleSort(&PM2P5_ADC[0], PM2P5_ADC_Count);//ÅÅÐò
        ; Setup parameters for call to function bubbleSort
        MOV     DPTR,#PM2P5_ADC_Count
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#PM2P5_ADC & 0xff
        MOV     R3,#(PM2P5_ADC >> 8) & 0xff
        LCALL   ??bubbleSort?relay
//  128 		ADC_Sum = 0;        
        MOV     DPTR,#ADC_Sum
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  129 		for(i=1;i<(SAMPLE_SIZE-1);i++){//È¥³ý²ÉÑùÊý¾ÝÖÐµÄ×î¸ßÖµ¼°¸ßµÍÖµ
        MOV     DPTR,#i
        INC     A
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  130 			ADC_Sum += PM2P5_ADC[i];
??PM2p5_Read_1:
        MOV     DPTR,#i
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine2 & 0xFFFF
//  131 		}
??CrossCallReturnLabel_3:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#ADC_Sum
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#i
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     DPTR,#i
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x13
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??PM2p5_Read_1
//  132 		ADC_Value  = ADC_Sum / (SAMPLE_SIZE-2);//¼õÈ¥×î´óºÍ×îÐ¡µÄÁ½¸ö	
        MOV     DPTR,#ADC_Sum
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x12
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     DPTR,#ADC_Value
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  133 		voltage    = (ADC_Value/2048.0)*3.3;//½«ADCÖµ×ª»¯³ÉPM2.5Öµ(ug/m3)
        MOV     DPTR,#ADC_Value
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_3a000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#voltage
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  134 		PM2p5_ugm3 = voltage*0.13*1000;
        MOV     DPTR,#voltage
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e051eb8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     DPTR,#PM2p5_ugm3
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  135 		printf("PM2p5_ugm3=%d ug/m3\r\n",PM2p5_ugm3);   //µ÷ÊÔ´òÓ¡
        ; Setup parameters for call to function printf
        MOV     DPTR,#PM2p5_ugm3
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#`?<Constant "PM2p5_ugm3=%d ug/m3\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "PM2p5_ugm3=%d ug/m3\\r\\n">` >> 8) & 0xff
        LCALL   ??printf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  136 		return PM2p5_ugm3;
        MOV     DPTR,#PM2p5_ugm3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
        REQUIRE _A_P1
//  137 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     R1,A
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,#PM2P5_ADC & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(PM2P5_ADC >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PM2p5_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PM2p5_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PM2p5_ADC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PM2p5_ADC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_280us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_280us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Dealy_10ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Dealy_10ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bubbleSort?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    bubbleSort

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PM2p5_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PM2p5_Read

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PM2p5_ugm3=%d ug/m3\\r\\n">`:
        DB "PM2p5_ugm3=%d ug/m3\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a000000:
        DD 3A000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e051eb8:
        DD 3E051EB8H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        END
// 
// 699 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//  10 bytes in segment SFR_AN
//  38 bytes in segment XDATA_ROM_C
//  54 bytes in segment XDATA_Z
// 
// 735 bytes of CODE  memory
//  22 bytes of CONST memory (+ 16 bytes shared)
//   0 bytes of DATA  memory (+ 10 bytes shared)
//  54 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
