###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         07/May/2023  20:54:24 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\Source\EndDevi #
#                          ce.c                                               #
#    Command line       =  -f D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·ä #
#                          ÃùÆ÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF11                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\Source\EndDevi #
#                          ce.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_SYS_FUNC   #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC          #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          vice\List\ -lA D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC253 #
#                          0\NODERED-·äÃùÆ÷\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDevice\List\ --diag_suppress          #
#                          Pe001,Pa010 -o D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC253 #
#                          0\NODERED-·äÃùÆ÷\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\EndDevice\Obj\ -e --no_unroll            #
#                          --no_inline --no_tbaa --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½ #
#                          Ì³Ì\CC2530\NODERED-·äÃùÆ÷\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì #
#                          ³Ì\CC2530\NODERED-·äÃùÆ÷\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\SOURCE\ -I                    #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì #
#                          ³Ì\CC2530\NODERED-·äÃùÆ÷\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\    #
#                          -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·ä #
#                          ÃùÆ÷\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERE #
#                          D-·äÃùÆ÷\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\HARDWARE\ -Om          #
#    List file          =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          vice\List\EndDevice.lst                            #
#    Object file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ #
#                          ÷\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          vice\Obj\EndDevice.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-·äÃùÆ÷\Projects\zstack\Samples\SampleApp\Source\EndDevice.c
      1          /**************************************************************************************************
                                                                                                                   ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          /*********************************************************************
     60           * INCLUDES
     61           */
     62          
     63          #include "ZComDef.h"
     64          #include "hal_drivers.h"
     65          #include "OSAL.h"
     66          #include "OSAL_Tasks.h"
     67          #include "nwk.h"
     68          #include "APS.h"
     69          #include "ZDApp.h"
     70          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
     71            #include "ZDNwkMgr.h"
     72          #endif
     73          #if defined ( ZIGBEE_FRAGMENTATION )
     74            #include "aps_frag.h"
     75          #endif
     76          
     77          #include "SampleApp.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     78          #include "WiFiGate.h"
     79          #include "OSAL.h"
     80          #include "ZGlobals.h"
     81          #include "AF.h"
     82          #include "aps_groups.h"
     83          #include "ZDApp.h"
     84          
     85          #include "SampleApp.h"
     86          #include "SampleAppHw.h"
     87          
     88          #include "OnBoard.h"
     89          
     90          /* HAL */
     91          #include "hal_lcd.h"
     92          #include "hal_led.h"
     93          #include "hal_key.h"
     94          #include "string.h"
     95          
     96          #include "MT_UART.h"
     97          #include "MT_APP.h"
     98          #include "MT.h"
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */
    103          
    104          // The order in this table must be identical to the task initialization calls below in osalInitTask.

   \                                 In  segment XDATA_ROM_C, align 1
    105          const pTaskEventHandlerFn tasksArr[] = {
   \                     tasksArr:
   \   000000   ....         DW ??macEventLoop?relay
   \   000002   ....         DW ??nwk_event_loop?relay
   \   000004   ....         DW ??Hal_ProcessEvent?relay
   \   000006   ....         DW ??APS_event_loop?relay
   \   000008   ....         DW ??ZDApp_event_loop?relay
   \   00000A   ....         DW ??SampleApp_ProcessEvent?relay
    106            macEventLoop,
    107            nwk_event_loop,
    108            Hal_ProcessEvent,
    109          #if defined( MT_TASK )
    110            MT_ProcessEvent,
    111          #endif
    112            APS_event_loop,
    113          #if defined ( ZIGBEE_FRAGMENTATION )
    114            APSF_ProcessEvent,
    115          #endif
    116            ZDApp_event_loop,
    117          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
    118            ZDNwkMgr_event_loop,
    119          #endif
    120            SampleApp_ProcessEvent, 
    121          };

   \                                 In  segment XDATA_ROM_C, align 1
    122          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
   \                     tasksCnt:
   \   000000   06           DB 6

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          uint16 *tasksEvents;
   \                     tasksEvents:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    124          /*********************************************************************
    125           * FUNCTIONS
    126           *********************************************************************/
    127          
    128          /*********************************************************************
    129           * @fn      osalInitTasks
    130           *
    131           * @brief   This function invokes the initialization function for each task.
    132           *
    133           * @param   void
    134           *
    135           * @return  none
    136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          void osalInitTasks( void )
   \                     osalInitTasks:
    138          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    139            uint8 taskID = 0;
    140          
    141            tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);
   \   000004                ; Setup parameters for call to function osal_mem_alloc
   \   000004   7A0C         MOV     R2,#0xc
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??osal_mem_alloc?relay
   \   00000B   90....       MOV     DPTR,#tasksEvents
   \   00000E   EA           MOV     A,R2
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   EB           MOV     A,R3
   \   000012   F0           MOVX    @DPTR,A
    142            osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));
   \   000013                ; Setup parameters for call to function osal_memset
   \   000013   7C0C         MOV     R4,#0xc
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7900         MOV     R1,#0x0
   \   000019   90....       MOV     DPTR,#tasksEvents
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_memset?relay
    143          
    144            macTaskInit( taskID++ );
   \   000024                ; Setup parameters for call to function macTaskInit
   \   000024   7900         MOV     R1,#0x0
   \   000026   12....       LCALL   ??macTaskInit?relay
    145            nwk_init( taskID++ );
   \   000029                ; Setup parameters for call to function nwk_init
   \   000029   7901         MOV     R1,#0x1
   \   00002B   12....       LCALL   ??nwk_init?relay
    146            Hal_Init( taskID++ );
   \   00002E                ; Setup parameters for call to function Hal_Init
   \   00002E   7902         MOV     R1,#0x2
   \   000030   12....       LCALL   ??Hal_Init?relay
    147          #if defined( MT_TASK )
    148            MT_TaskInit( taskID++ );
    149          #endif
    150            APS_Init( taskID++ );
   \   000033                ; Setup parameters for call to function APS_Init
   \   000033   7903         MOV     R1,#0x3
   \   000035   12....       LCALL   ??APS_Init?relay
    151          #if defined ( ZIGBEE_FRAGMENTATION )
    152            APSF_Init( taskID++ );
    153          #endif
    154            ZDApp_Init( taskID++ );
   \   000038                ; Setup parameters for call to function ZDApp_Init
   \   000038   7904         MOV     R1,#0x4
   \   00003A   12....       LCALL   ??ZDApp_Init?relay
    155          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
    156            ZDNwkMgr_Init( taskID++ );
    157          #endif
    158            SampleApp_Init( taskID++ );  
   \   00003D                ; Setup parameters for call to function SampleApp_Init
   \   00003D   7905         MOV     R1,#0x5
   \   00003F   12....       LCALL   ??SampleApp_Init?relay
    159          }
   \   000042   D083         POP     DPH
   \   000044   D082         POP     DPL
   \   000046   02....       LJMP    ?BRET
    160          

   \                                 In  segment XDATA_ROM_C, align 1
    161          const cId_t InClusterList[1] =
   \                     InClusterList:
   \   000000   1000         DW 16
    162          {
    163            BEEP_CONTROL_CLUSTERID
    164          };
    165          

   \                                 In  segment XDATA_ROM_C, align 1
    166          const SimpleDescriptionFormat_t EndDevice_SimpleDesc = 
   \                     EndDevice_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW InClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
    167          {
    168            SAMPLEAPP_ENDPOINT,                 //  int Endpoint;
    169            SAMPLEAPP_PROFID,                   //  uint16 AppProfId[2];
    170            SAMPLEAPP_DEVICEID,                 //  uint16 AppDeviceId[2];
    171            SAMPLEAPP_DEVICE_VERSION,           //  int   AppDevVer:4;
    172            SAMPLEAPP_FLAGS,                    //  int   AppFlags:4;
    173            1,                                  //  uint8  AppNumInClusters;
    174            (cId_t *)InClusterList,                      //  uint8 *pAppInClusterList;
    175            0,                                  //  uint8  AppNumOutClusters;
    176            NULL             //  uint8 *pAppOutClusterList;
    177          };
    178          // This is the Endpoint/Interface description.  It is defined here, but
    179          // filled-in in SampleApp_Init().  Another way to go would be to fill
    180          // in the structure here and make it a "const" (in code space).  The
    181          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          endPointDesc_t EndDevice_epDesc;
   \                     EndDevice_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    183          /*********************************************************************
    184           * EXTERNAL VARIABLES
    185           */
    186          
    187          /*********************************************************************
    188           * EXTERNAL FUNCTIONS
    189           */
    190          
    191          /*********************************************************************
    192           * LOCAL VARIABLES
    193           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195                                    // This variable will be received when
    196                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    198          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          afAddrType_t Point_To_Point_DstAddr;//µã¶ÔµãÍ¨ÐÅ¶¨Òå
   \                     Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          afAddrType_t Boardcast_DstAddr;//µã¶ÔµãÍ¨ÐÅ¶¨Òå
   \                     Boardcast_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    203          /*********************************************************************
    204           * LOCAL FUNCTIONS
    205           */
    206          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    207          void Send_LEDState2Coor(uint8 *state);
    208          /*********************************************************************
    209           * @fn      SampleApp_Init
    210           *
    211           * @brief   Initialization function for the Generic App Task.
    212           *          This is called during initialization and should contain
    213           *          any application specific initialization (ie. hardware
    214           *          initialization/setup, table initialization, power up
    215           *          notificaiton ... ).
    216           *
    217           * @param   task_id - the ID assigned by OSAL.  This ID should be
    218           *                    used to send messages and set timers.
    219           *
    220           * @return  none
    221           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    223          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    224            SampleApp_TaskID   = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    225            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    226            SampleApp_TransID  = 0; 
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    227          
    228            UartInit(HAL_UART_PORT_1,HAL_UART_BR_115200);//ÓÃÓÚµ÷ÊÔ
   \   000015                ; Setup parameters for call to function UartInit
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   ??UartInit?relay
    229          	Beep_Init();   //³õÊ¼»¯·äÃùÆ÷¿ØÖÆIO  
   \   00001C                ; Setup parameters for call to function Beep_Init
   \   00001C   12....       LCALL   ??Beep_Init?relay
    230            printf("i am end device\r\n");//´®¿Ú´òÓ¡   
   \   00001F                ; Setup parameters for call to function printf
   \   00001F   7A..         MOV     R2,#`?<Constant "i am end device\\r\\n">` & 0xff
   \   000021   7B..         MOV     R3,#(`?<Constant "i am end device\\r\\n">` >> 8) & 0xff
   \   000023   12....       LCALL   ??printf?relay
    231            // µã¶ÔµãÍ¨Ñ¶¶¨Òå
    232            Point_To_Point_DstAddr.addrMode       = (afAddrMode_t)Addr16Bit; //µã²¥
   \   000026   90....       MOV     DPTR,#Point_To_Point_DstAddr + 8
   \   000029   7402         MOV     A,#0x2
   \   00002B   F0           MOVX    @DPTR,A
    233            Point_To_Point_DstAddr.endPoint       = SAMPLEAPP_ENDPOINT;      
   \   00002C   A3           INC     DPTR
   \   00002D   7414         MOV     A,#0x14
   \   00002F   F0           MOVX    @DPTR,A
    234            Point_To_Point_DstAddr.addr.shortAddr = 0x0000;//·¢¸øÐ­µ÷Æ÷
   \   000030   90....       MOV     DPTR,#Point_To_Point_DstAddr
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   F0           MOVX    @DPTR,A
    235            
    236            // ÌîÐ´¶Ëµã
    237            EndDevice_epDesc.endPoint   = SAMPLEAPP_ENDPOINT;
   \   000037   90....       MOV     DPTR,#EndDevice_epDesc
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    238            EndDevice_epDesc.task_id    = &SampleApp_TaskID;
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000044   F0           MOVX    @DPTR,A
    239            EndDevice_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&EndDevice_SimpleDesc;
   \   000045   A3           INC     DPTR
   \   000046   74..         MOV     A,#EndDevice_SimpleDesc & 0xff
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   74..         MOV     A,#(EndDevice_SimpleDesc >> 8) & 0xff
   \   00004C   F0           MOVX    @DPTR,A
    240            EndDevice_epDesc.latencyReq = noLatencyReqs;
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    241            
    242            // ×¢²á¶Ëµã
    243            afRegister( &EndDevice_epDesc );
   \   000050                ; Setup parameters for call to function afRegister
   \   000050   7A..         MOV     R2,#EndDevice_epDesc & 0xff
   \   000052   7B..         MOV     R3,#(EndDevice_epDesc >> 8) & 0xff
   \   000054   12....       LCALL   ??afRegister?relay
    244          }
   \   000057   7F01         MOV     R7,#0x1
   \   000059   02....       LJMP    ?BANKED_LEAVE_XDATA
    245          
    246          /*********************************************************************
    247           * @fn      SampleApp_ProcessEvent
    248           *
    249           * @brief   Generic Application Task event processor.  This function
    250           *          is called to process all events for the task.  Events
    251           *          include timers, messages and any other user defined events.
    252           *
    253           * @param   task_id  - The OSAL assigned task ID.
    254           * @param   events - events to process.  This is a bit map and can
    255           *                   contain more than one event.
    256           *
    257           * @return  none
    258           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    259          uint8 SendTemperatureIndicate = 1;
   \                     SendTemperatureIndicate:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for SendTemperatureIndicate>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          uint8 KeySta = KEY_RELASE;
   \                     KeySta:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    261          uint8 BeepOn = 0;//BeepOn=1£¬·äÃùÆ÷ÏìÆð£¬BeepOn=0,·äÃùÆ÷Í£Ö¹
   \                     BeepOn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    263          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    264            afIncomingMSGPacket_t *MSGpkt;
    265            (void)task_id;  // Intentionally unreferenced parameter
    266          
    267            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6064         JZ      ??SampleApp_ProcessEvent_0
    268            {
    269              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802E         SJMP    ??SampleApp_ProcessEvent_1
    270              while ( MSGpkt )
    271              {
    272                switch ( MSGpkt->hdr.event )
    273                {        
    274                  // Received when a messages is received (OTA) for this endpoint
    275                  case AF_INCOMING_MSG_CMD:
    276                    SampleApp_MessageMSGCB( MSGpkt );
    277                    break;
    278          
    279                  // Received whenever the device changes state in the network
    280                  case ZDO_STATE_CHANGE:          
    281                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    282                    if ((SampleApp_NwkState == DEV_ROUTER)
    283                       ||(SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6407         XRL     A,#0x7
   \   000018   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6406         XRL     A,#0x6
   \   00001D   7017         JNZ     ??SampleApp_ProcessEvent_4
    284                    {
    285                      printf("connect coordinator\r\n"); 
   \                     ??SampleApp_ProcessEvent_3:
   \   00001F                ; Setup parameters for call to function printf
   \   00001F   7A..         MOV     R2,#`?<Constant "connect coordinator\\r\\n">` & 0xff
   \   000021   7B..         MOV     R3,#(`?<Constant "connect coordinator\\r\\n">` >> 8) & 0xff
   \   000023   12....       LCALL   ??printf?relay
    286          						osal_start_timerEx( SampleApp_TaskID, BEEP_MSG_EVT,1);
   \   000026                ; Setup parameters for call to function osal_start_timerEx
   \   000026   7C01         MOV     R4,#0x1
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A20         MOV     R2,#0x20
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_start_timerEx?relay
    287                    }
    288                    break;
    289          
    290                  default:
    291                    break;
    292                }
    293          
    294                // Release the memory
    295                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    296          
    297                // Next - if one is available
    298                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   601A         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   24E6         ADD     A,#-0x1a
   \   000058   6006         JZ      ??SampleApp_ProcessEvent_6
   \   00005A   2449         ADD     A,#0x49
   \   00005C   60B1         JZ      ??SampleApp_ProcessEvent_2
   \   00005E   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000060                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000060   AA..         MOV     R2,?V0 + 0
   \   000062   AB..         MOV     R3,?V0 + 1
   \   000064   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000067   80CD         SJMP    ??SampleApp_ProcessEvent_4
    299              }
    300          		
    301              // return unprocessed events
    302              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   6480         XRL     A,#0x80
   \   00006E   FB           MOV     R3,A
   \   00006F   802D         SJMP    ??SampleApp_ProcessEvent_7
    303            }//if ( events & SYS_EVENT_MSG )
    304          	
    305          	if(events & BEEP_MSG_EVT){//ÊÇBEEP_MSG_EVTÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_0:
   \   000071   EE           MOV     A,R6
   \   000072   5420         ANL     A,#0x20
   \   000074   6024         JZ      ??SampleApp_ProcessEvent_8
    306          			if(BeepOn){//Èç¹ûÊ¹ÄÜ·äÃùÆ÷
   \   000076   90....       MOV     DPTR,#BeepOn
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   600C         JZ      ??SampleApp_ProcessEvent_9
    307          				BEEP_IO_TOGGLE();//·äÃùÆ÷µçÆ½ÇÐ»»
   \   00007C   D2F0         SETB    B.0
   \   00007E   A296         MOV     C,0x90.6
   \   000080   30F001       JNB     B.0,??SampleApp_ProcessEvent_10
   \   000083   B3           CPL     C
   \                     ??SampleApp_ProcessEvent_10:
   \   000084   9296         MOV     0x90.6,C
   \   000086   8002         SJMP    ??SampleApp_ProcessEvent_11
    308          			}
    309          			else{
    310          				BEEP_IO_LOW();//Êä³öµÍµçÆ½
   \                     ??SampleApp_ProcessEvent_9:
   \   000088   C296         CLR     0x90.6
    311          			}
    312          			/*1msºó´¥·¢BEEP_MSG_EVTÊÂ¼þ*/
    313          			osal_start_timerEx( SampleApp_TaskID, BEEP_MSG_EVT,1);
   \                     ??SampleApp_ProcessEvent_11:
   \   00008A                ; Setup parameters for call to function osal_start_timerEx
   \   00008A   7C01         MOV     R4,#0x1
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   7A20         MOV     R2,#0x20
   \   000090   7B00         MOV     R3,#0x0
   \   000092   90....       MOV     DPTR,#SampleApp_TaskID
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   ??osal_start_timerEx?relay
    314          	}
    315            // Discard unknown events
    316            return 0;
   \                     ??SampleApp_ProcessEvent_8:
   \   00009A   7A00         MOV     R2,#0x0
   \   00009C   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_7:
   \   00009E   7F04         MOV     R7,#0x4
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A3                REQUIRE _A_P1
    317          }
    318          /*********************************************************************
    319           * LOCAL FUNCTIONS
    320           */
    321          
    322          /*********************************************************************
    323           * @fn      SampleApp_MessageMSGCB
    324           *
    325           * @brief   Data message processor callback.  This function processes
    326           *          any incoming data - probably from other devices.  So, based
    327           *          on cluster ID, perform the intended action.
    328           *
    329           * @param   none
    330           *
    331           * @return  none
    332           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    333          uint16 _u16temp;
   \                     _u16temp:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    334          uint8 LED_State[4]={0,0,0,0};
   \                     LED_State:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    335          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    336          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    337          		switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0000         DW        0
   \   00001B   0200         DW        2
   \   00001D   1000         DW        16
   \   00001F   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000021   4000         DW        64
   \   000023   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_2
    338          		{
    339          				case BIND_REQUEST_CMD_ID:
    340          						_u16temp = BEEP_CONTROL_CLUSTERID;  
   \                     ??SampleApp_MessageMSGCB_1:
   \   000027   90....       MOV     DPTR,#_u16temp
   \   00002A   7410         MOV     A,#0x10
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    341          						ResponeBind(&_u16temp,&pkt->srcAddr);
   \   000030                ; Setup parameters for call to function ResponeBind
   \   000030   EA           MOV     A,R2
   \   000031   2406         ADD     A,#0x6
   \   000033   FC           MOV     R4,A
   \   000034   EB           MOV     A,R3
   \   000035   3400         ADDC    A,#0x0
   \   000037   FD           MOV     R5,A
   \   000038   7A..         MOV     R2,#_u16temp & 0xff
   \   00003A   7B..         MOV     R3,#(_u16temp >> 8) & 0xff
   \   00003C   12....       LCALL   ??ResponeBind?relay
    342          						printf("get bind request and respone\r\n");
   \   00003F                ; Setup parameters for call to function printf
   \   00003F   7A..         MOV     R2,#`?<Constant "get bind request and ...">` & 0xff
   \   000041   7B..         MOV     R3,#(`?<Constant "get bind request and ...">` >> 8) & 0xff
   \   000043   12....       LCALL   ??printf?relay
    343          						break;
   \   000046   8048         SJMP    ??SampleApp_MessageMSGCB_2
    344          				case BEEP_CONTROL_CLUSTERID:
    345          					printf("get cmd:%d\r\n",pkt->cmd.Data[0]);
   \                     ??SampleApp_MessageMSGCB_0:
   \   000048   EA           MOV     A,R2
   \   000049   2421         ADD     A,#0x21
   \   00004B   F8           MOV     R0,A
   \   00004C   EB           MOV     A,R3
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   F9           MOV     R1,A
   \   000050   E8           MOV     A,R0
   \   000051   FE           MOV     R6,A
   \   000052   E9           MOV     A,R1
   \   000053   FF           MOV     R7,A
   \   000054                ; Setup parameters for call to function printf
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F583         MOV     DPH,A
   \   00005E   8882         MOV     DPL,R0
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V0 + 0,A
   \   000063   75..00       MOV     ?V0 + 1,#0x0
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7A..         MOV     R2,#`?<Constant "get cmd:%d\\r\\n">` & 0xff
   \   00006D   7B..         MOV     R3,#(`?<Constant "get cmd:%d\\r\\n">` >> 8) & 0xff
   \   00006F   12....       LCALL   ??printf?relay
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
    346          					if(pkt->cmd.Data[1] == 0){//Í£Ö¹·äÃùÆ÷
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F583         MOV     DPH,A
   \   000081   8882         MOV     DPL,R0
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   90....       MOV     DPTR,#BeepOn
   \   000088   7003         JNZ     ??SampleApp_MessageMSGCB_3
    347          							BeepOn = 0;//BeepOn=0,·äÃùÆ÷Í£Ö¹
   \   00008A   E4           CLR     A
   \   00008B   8002         SJMP    ??SampleApp_MessageMSGCB_4
    348          					}
    349          					else{//´ò¿ª·äÃùÆ÷
    350          							BeepOn = 1;//BeepOn=1£¬·äÃùÆ÷ÏìÆð				
   \                     ??SampleApp_MessageMSGCB_3:
   \   00008D   7401         MOV     A,#0x1
   \                     ??SampleApp_MessageMSGCB_4:
   \   00008F   F0           MOVX    @DPTR,A
    351          					}
    352          						break;
    353          		}
    354          }
   \                     ??SampleApp_MessageMSGCB_2:
   \   000090   7F02         MOV     R7,#0x2
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SendTemperatureIndicate>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalInitTasks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalInitTasks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "i am end device\\r\\n">`:
   \   000000   6920616D     DB "i am end device\015\012"
   \            20656E64
   \            20646576
   \            6963650D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "connect coordinator\\r\\n">`:
   \   000000   636F6E6E     DB "connect coordinator\015\012"
   \            65637420
   \            636F6F72
   \            64696E61
   \            746F720D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "get bind request and ...">`:
   \   000000   67657420     DB "get bind request and respone\015\012"
   \            62696E64
   \            20726571
   \            75657374
   \            20616E64
   \            20726573
   \            706F6E65
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "get cmd:%d\\r\\n">`:
   \   000000   67657420     DB "get cmd:%d\015\012"
   \            636D643A
   \            25640D0A
   \            00      
    355          
    356          /*********************************************************************
    357          *********************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     SampleApp_Init                  0      0      9
       -> UartInit                   0      0     18
       -> Beep_Init                  0      0     18
       -> printf                     0      0     18
       -> afRegister                 0      0     18
     SampleApp_MessageMSGCB          0      0     24
       -> ResponeBind                0      0     20
       -> printf                     0      0     20
       -> printf                     0      0     24
     SampleApp_ProcessEvent          0      0     12
       -> osal_msg_receive           0      0     24
       -> printf                     0      0     24
       -> osal_start_timerEx         0      0     24
       -> osal_msg_deallocate        0      0     24
       -> osal_msg_receive           0      0     24
       -> SampleApp_MessageMSGCB     0      0     24
       -> osal_start_timerEx         0      0     24
     osalInitTasks                   2      0      0
       -> osal_mem_alloc             4      0      0
       -> osal_memset                4      0      0
       -> macTaskInit                4      0      0
       -> nwk_init                   4      0      0
       -> Hal_Init                   4      0      0
       -> APS_Init                   4      0      0
       -> ZDApp_Init                 4      0      0
       -> SampleApp_Init             4      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     _A_P1                                         1
     tasksArr                                     12
     tasksCnt                                      1
     tasksEvents                                   2
     osalInitTasks                                73
     InClusterList                                 2
     EndDevice_SimpleDesc                         12
     EndDevice_epDesc                              6
     SampleApp_TaskID                              1
     SampleApp_NwkState                            1
     SampleApp_TransID                             1
     Point_To_Point_DstAddr                       12
     Boardcast_DstAddr                            12
     SampleApp_Init                               92
     SendTemperatureIndicate                       1
     KeySta                                        1
     BeepOn                                        1
     SampleApp_ProcessEvent                      163
     _u16temp                                      2
     LED_State                                     4
     SampleApp_MessageMSGCB                      149
     ?<Initializer for SendTemperatureIndicate>    1
     ??osalInitTasks?relay                         6
     ??SampleApp_Init?relay                        6
     ??SampleApp_ProcessEvent?relay                6
     ??SampleApp_MessageMSGCB?relay                6
     ?<Constant "i am end device\r\n">            18
     ?<Constant "connect coordinator\r\n">        22
     ?<Constant "get bind request and ...">       31
     ?<Constant "get cmd:%d\r\n">                 13

 
 477 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
 111 bytes in segment XDATA_ROM_C
  43 bytes in segment XDATA_Z
 
 502 bytes of CODE  memory
 111 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 byte shared)
  44 bytes of XDATA memory

Errors: none
Warnings: 1
