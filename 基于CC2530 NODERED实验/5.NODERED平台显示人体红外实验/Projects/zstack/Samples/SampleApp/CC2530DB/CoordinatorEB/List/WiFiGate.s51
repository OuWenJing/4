///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        20/May/2023  20:38:15 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530          /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Compone /
//                          nts\HARDWARE\WiFiGate.c                           /
//    Command line       =  -f "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530      /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ              /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wConfig.cfg" (-DSECURE=0             /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF11                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ /
//                          ΩÃ≥Ã\ª˘”⁄CC2530 NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ /
//                          ∫ÏÕ‚ µ—È\Components\HARDWARE\WiFiGate.c" -D       /
//                          ZIGBEEPRO -D ZTOOL_P1 -D MT_SYS_FUNC -D           /
//                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D            /
//                          NV_RESTORE -lC "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘” /
//                          ⁄CC2530 NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coord /
//                          inatorEB\List\" -lA "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥ /
//                          Ã\ª˘”⁄CC2530 NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ /
//                          ‚ µ—È\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          CoordinatorEB\List\" --diag_suppress Pe001,Pa010  /
//                          -o "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530      /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB /
//                          \Obj\" -e --debug --core=plain --dptr=16,1        /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530      /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\" -I          /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\"   /
//                          -I "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530      /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAI /
//                          N\TI2530DB\" -I "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘ /
//                          ”⁄CC2530 NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ— /
//                          È\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\COMPONENTS\MT\" -I                     /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\HAL\INCLUDE\" -I                     /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\HAL\TARGET\CC2530EB\" -I             /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\MCU\CCSOC\" -I                  /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\INCLUDE\" -I                    /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\AF\" -I                        /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\NWK\" -I                       /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SEC\" -I                       /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SAPI\" -I                      /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SYS\" -I                       /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\ZDO\" -I                       /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\F8W\" -I                        /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\" -I "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ /
//                          ΩÃ≥Ã\ª˘”⁄CC2530 NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ /
//                          ∫ÏÕ‚ µ—È\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" -I  /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\SERVICES\SDATA\" -I                  /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\INCLUDE\" -I                     /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\HIGH_LEVEL\" -I                  /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I             /
//                          "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530         /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"    /
//                          -I "D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530      /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\HARDWARE\" -Ohz                      /
//    List file          =  D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530          /
//                          NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB /
//                          \List\WiFiGate.s51                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME WiFiGate

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_GT_X
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SendToWiFiNetwork?relay
        FUNCTION ??SendToWiFiNetwork?relay,0203H
        PUBLIC ??WiFiGate_Init?relay
        FUNCTION ??WiFiGate_Init?relay,0203H
        PUBLIC ??WiFiGate_ProcessEvent?relay
        FUNCTION ??WiFiGate_ProcessEvent?relay,0203H
        PUBLIC ??WiFi_LED_REST?relay
        FUNCTION ??WiFi_LED_REST?relay,0203H
        PUBLIC ??WiFi_LED_SET?relay
        FUNCTION ??WiFi_LED_SET?relay,0203H
        PUBLIC ??WiFi_Send_ATCommand?relay
        FUNCTION ??WiFi_Send_ATCommand?relay,0203H
        PUBLIC ??WiFi_Set_White?relay
        FUNCTION ??WiFi_Set_White?relay,0203H
        PUBLIC NextEvent
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBLIC SendToWiFiNetwork
        FUNCTION SendToWiFiNetwork,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Ticks_SendATCmd_Count
        PUBLIC WiFiCmdHandle
        PUBLIC WiFiGate_Init
        FUNCTION WiFiGate_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WiFiGate_ProcessEvent
        FUNCTION WiFiGate_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC WiFiGate_TaskId
        PUBLIC WiFiModeInitDone
        PUBLIC WiFiRecvDataBuffer
        PUBLIC WiFiRecvLenght
        PUBLIC WiFi_LED_REST
        FUNCTION WiFi_LED_REST,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC WiFi_LED_SET
        FUNCTION WiFi_LED_SET,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC WiFi_Send_ATCommand
        FUNCTION WiFi_Send_ATCommand,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC WiFi_Set_White
        FUNCTION WiFi_Set_White,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_14
        PUBWEAK __Constant_1e
        PUBWEAK __Constant_700
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_start_timerEx  SYMBOL "osal_start_timerEx"
UartInit            SYMBOL "UartInit"
delay_ms            SYMBOL "delay_ms"
memset              SYMBOL "memset"
HalUARTResetRxQueue SYMBOL "HalUARTResetRxQueue"
strlen              SYMBOL "strlen"
HalUARTWrite        SYMBOL "HalUARTWrite"
printf              SYMBOL "printf"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTRead         SYMBOL "HalUARTRead"
strstr              SYMBOL "strstr"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTResetRxQueue?relay SYMBOL "?relay", HalUARTResetRxQueue
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??UartInit?relay    SYMBOL "?relay", UartInit
??delay_ms?relay    SYMBOL "?relay", delay_ms
??memset?relay      SYMBOL "?relay", memset
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??printf?relay      SYMBOL "?relay", printf
??strlen?relay      SYMBOL "?relay", strlen
??strstr?relay      SYMBOL "?relay", strstr
SendToWiFiNetwork   SYMBOL "SendToWiFiNetwork"
??SendToWiFiNetwork?relay SYMBOL "?relay", SendToWiFiNetwork
WiFiGate_Init       SYMBOL "WiFiGate_Init"
??WiFiGate_Init?relay SYMBOL "?relay", WiFiGate_Init
WiFiGate_ProcessEvent SYMBOL "WiFiGate_ProcessEvent"
??WiFiGate_ProcessEvent?relay SYMBOL "?relay", WiFiGate_ProcessEvent
WiFi_LED_REST       SYMBOL "WiFi_LED_REST"
??WiFi_LED_REST?relay SYMBOL "?relay", WiFi_LED_REST
WiFi_LED_SET        SYMBOL "WiFi_LED_SET"
??WiFi_LED_SET?relay SYMBOL "?relay", WiFi_LED_SET
WiFi_Send_ATCommand SYMBOL "WiFi_Send_ATCommand"
??WiFi_Send_ATCommand?relay SYMBOL "?relay", WiFi_Send_ATCommand
WiFi_Set_White      SYMBOL "WiFi_Set_White"
??WiFi_Set_White?relay SYMBOL "?relay", WiFi_Set_White

        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UartInit
        FUNCTION UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN delay_ms
        FUNCTION delay_ms,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTResetRxQueue
        FUNCTION HalUARTResetRxQueue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTResetRxQueue?relay
        FUNCTION ??HalUARTResetRxQueue?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??UartInit?relay
        FUNCTION ??UartInit?relay,00H
        EXTERN ??delay_ms?relay
        FUNCTION ??delay_ms?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN ??strstr?relay
        FUNCTION ??strstr?relay,00H

// D:\◊ ¡œ\∞À≥«-V2\∑‰≥≤\–¬±‡ΩÃ≥Ã\ª˘”⁄CC2530 NODERED µ—È\5.NODERED∆ΩÃ®œ‘ æ»ÀÃÂ∫ÏÕ‚ µ—È\Components\HARDWARE\WiFiGate.c
//    1 #include "WiFiGate.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    2 
//    3 
//    4 #define WIFI_RECV_DATA_BUFFER_LEN 128

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    5 uint8 WiFiRecvDataBuffer[ WIFI_RECV_DATA_BUFFER_LEN ];
WiFiRecvDataBuffer:
        DS 128
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    6 uint8 WiFiRecvLenght = 0;
WiFiRecvLenght:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    7 uint8 NextEvent=0;
NextEvent:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    8 uint8 WiFiCmdHandle = 0;
WiFiCmdHandle:
        DS 1
        REQUIRE __INIT_XDATA_Z
//    9 
//   10 #define GET_RECV_LENGHT()        Hal_UART_RxBufLen(HAL_UART_PORT_0);
//   11 #define GET_RECV_DATA(b,l)       HalUARTRead(HAL_UART_PORT_0,b,l);
//   12 /*
//   13 WIFIƒ£øÈ≥ı ºªØ
//   14 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   15 uint8 WiFiGate_TaskId = 0;
WiFiGate_TaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   16 uint8 WiFiModeInitDone = 0;
WiFiModeInitDone:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   17 
//   18 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   19 void WiFiGate_Init( uint8 task_id )
WiFiGate_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function WiFiGate_Init
        CODE
//   20 {
        FUNCALL WiFiGate_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_Init, UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_Init, delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   21   WiFiGate_TaskId = task_id;
        MOV     DPTR,#WiFiGate_TaskId
        MOVX    @DPTR,A
//   22   osal_start_timerEx( WiFiGate_TaskId, WIFI_PROCESS_PRODIC,2000); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_start_timerEx?relay
//   23   UartInit(HAL_UART_PORT_0,HAL_UART_BR_115200);
        ; Setup parameters for call to function UartInit
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??UartInit?relay
//   24     P1DIR |= 0x60;      //P1.5°¢P1.6∂®“ÂŒ™ ‰≥ˆ
        ORL     0xfe,#0x60
//   25     P1SEL &= ~0x80;     //…Ë÷√P1.7Œ™∆’Õ®IOø⁄  
        ANL     0xf4,#0x7f
//   26     P1DIR &= ~0x80;     //∞¥º¸Ω”‘⁄P1.7ø⁄…œ£¨…ËP1.7Œ™ ‰»Îƒ£ Ω 
        ANL     0xfe,#0x7f
//   27     P1INP &= ~0x80;     //¥Úø™P1.7…œ¿≠µÁ◊Ë
        ANL     0xf6,#0x7f
//   28  // printf("wifi connect start\r\n");
//   29   WiFi_RES = 0;
        CLR     0x90.5
//   30   delay_ms(1);
        ; Setup parameters for call to function delay_ms
        MOV     DPTR,#__Constant_1
        LCALL   ?XLOAD_R2345
        LCALL   ??delay_ms?relay
//   31   WiFi_RES = 1;
        SETB    0x90.5
//   32   WiFi_LED=0;
        CLR     0x90.6
//   33  /* WiFi_LED_SET(0x000000);
//   34   WiFi_LED_REST();
//   35   WiFi_LED_SET(0x0700);
//   36   delay_ms(2000);
//   37   WiFi_LED_SET(0x0000);
//   38   delay_ms(2000);
//   39   WiFi_LED_SET(0x0707);
//   40   delay_ms(2000);
//   41   WiFi_LED_SET(0x0000);
//   42   delay_ms(2000);
//   43   WiFi_LED_SET(0x3333);
//   44   delay_ms(2000);
//   45   WiFi_LED_SET(0x0000);
//   46   delay_ms(2000);*/
//   47 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P1DIR
        REQUIRE P1SEL
        REQUIRE P1INP
        REQUIRE _A_P1
//   48 /*
//   49 send_times ∑¢ÀÕ¥Œ ˝
//   50 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   51 uint32 Ticks_SendATCmd_Count = 0;
Ticks_SendATCmd_Count:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   52 static uint8 len;  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   53 uint8 WiFi_Send_ATCommand(uint8 *buf,uint32 timeout,uint8 send_times,uint8 *expect)
WiFi_Send_ATCommand:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function WiFi_Send_ATCommand
        CODE
//   54 {
        FUNCALL WiFi_Send_ATCommand, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFi_Send_ATCommand, HalUARTResetRxQueue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFi_Send_ATCommand, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFi_Send_ATCommand, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFi_Send_ATCommand, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFi_Send_ATCommand, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFi_Send_ATCommand, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFi_Send_ATCommand, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 1,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//   55     uint8 ret = WIFI_RSP_NULL;
        MOV     ?V0 + 0,#0x0
//   56     static uint8 state0 = 0,count = 0;
//   57     if(state0 == 0){
        MOV     DPTR,#??state0
        MOVX    A,@DPTR
        JNZ     ??WiFi_Send_ATCommand_0
//   58 		memset((void*)WiFiRecvDataBuffer,0,WIFI_RECV_DATA_BUFFER_LEN);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#-0x80
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//   59 		WiFiRecvLenght = 0;
        MOV     DPTR,#WiFiRecvLenght
        CLR     A
        MOVX    @DPTR,A
//   60 		HalUARTResetRxQueue();
        ; Setup parameters for call to function HalUARTResetRxQueue
        LCALL   ??HalUARTResetRxQueue?relay
//   61 		SEND_TO_WIFI(buf,strlen((const char*)buf)); 
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//   62         printf("WiFi>>>:%s\r\n",buf);
        ; Setup parameters for call to function printf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R2,#`?<Constant "WiFi>>>:%s\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "WiFi>>>:%s\\r\\n">` >> 8) & 0xff
        LCALL   ??printf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//   63         state0 = 1;
        MOV     DPTR,#??state0
        MOV     A,#0x1
        MOVX    @DPTR,A
//   64         count++;
        MOV     DPTR,#??count
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//   65 		Ticks_SendATCmd_Count = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#Ticks_SendATCmd_Count
        LCALL   ?XSTORE_R2345
//   66 		WiFiRecvLenght = 0;
        MOV     DPTR,#WiFiRecvLenght
??WiFi_Send_ATCommand_1:
        CLR     A
        SJMP    ??WiFi_Send_ATCommand_2
//   67     }
//   68     else if(state0 == 1){
??WiFi_Send_ATCommand_0:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??WiFi_Send_ATCommand_3
//   69         if((++Ticks_SendATCmd_Count) >= timeout){ 
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#Ticks_SendATCmd_Count
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_TO_X
        MOV     DPTR,#Ticks_SendATCmd_Count
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GT_X
        JC      ??WiFi_Send_ATCommand_4
//   70             if(send_times == count){//∂‡¥Œ∑¢ÀÕ÷Æ∫Û ªπ «√ª”–∑¥”¶æÕ∑µªÿ
        MOV     DPTR,#??count
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??WiFi_Send_ATCommand_5
//   71                 ret = WIFI_RSP_TIMEOUT;
        MOV     ?V0 + 0,#0x1
//   72                 count = 0;
        CLR     A
        MOVX    @DPTR,A
//   73             }
//   74             state0 = 0;            
??WiFi_Send_ATCommand_5:
        MOV     DPTR,#??state0
        SJMP    ??WiFi_Send_ATCommand_1
//   75         }
//   76         else{
//   77 		  len = GET_RECV_LENGHT();
??WiFi_Send_ATCommand_4:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        LCALL   ?Subroutine4 & 0xFFFF
//   78 		  if(len){
??CrossCallReturnLabel_9:
        JZ      ??WiFi_Send_ATCommand_6
//   79 			GET_RECV_DATA(&WiFiRecvDataBuffer[WiFiRecvLenght],len);
        ; Setup parameters for call to function HalUARTRead
        LCALL   ?Subroutine1 & 0xFFFF
//   80 			WiFiRecvLenght += len;
//   81 			if(WiFiRecvLenght >= WIFI_RECV_DATA_BUFFER_LEN){
??CrossCallReturnLabel_0:
        CLR     C
        SUBB    A,#-0x80
        JC      ??WiFi_Send_ATCommand_6
//   82 				WiFiRecvLenght = 0;
        CLR     A
        MOVX    @DPTR,A
//   83 			}				
//   84 		  }
//   85 		  	
//   86 		  if((expect)&&strstr((const char*)WiFiRecvDataBuffer,(const char*)expect)){
??WiFi_Send_ATCommand_6:
        MOV     A,R6
        ORL     A,R7
        JZ      ??WiFi_Send_ATCommand_3
        ; Setup parameters for call to function strstr
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#WiFiRecvDataBuffer & 0xff
        MOV     R3,#(WiFiRecvDataBuffer >> 8) & 0xff
        LCALL   ??strstr?relay
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??WiFi_Send_ATCommand_3
//   87 			ret = WIFI_RSP_OK;
        MOV     ?V0 + 0,#0x2
//   88 			state0 = 0;
        MOV     DPTR,#??state0
        CLR     A
        MOVX    @DPTR,A
//   89 			count = 0;      
        MOV     DPTR,#??count
??WiFi_Send_ATCommand_2:
        MOVX    @DPTR,A
//   90 		  }			
//   91         }//else
//   92     }
//   93     
//   94     return ret;
??WiFi_Send_ATCommand_3:
        MOV     R1,?V0 + 0
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   95 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??state0:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??count:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   96 /*
//   97 wifiÕ¯πÿ¥¶¿Ì»ŒŒÒ£¨∞¸¿®≥ı ºªØWiFiƒ£øÈ£¨Ω” ’ ˝æ›
//   98 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   99 static uint8 ConnectState = 0,len;
ConnectState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
len:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  100 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  101 uint16 WiFiGate_ProcessEvent( uint8 task_id, uint16 events )
WiFiGate_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function WiFiGate_ProcessEvent
        CODE
//  102 {
        FUNCALL WiFiGate_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, WiFi_Send_ATCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, WiFi_Send_ATCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, WiFi_Send_ATCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, WiFi_Send_ATCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, WiFi_Send_ATCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, WiFi_Send_ATCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, WiFi_LED_SET
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiGate_ProcessEvent, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  103 
//  104   (void)task_id;  // Intentionally unreferenced parameter
//  105 
//  106   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??WiFiGate_ProcessEvent_0
//  107   {//»Áπ˚ «œµÕ≥»ŒŒÒ
//  108     return (events ^ SYS_EVENT_MSG);
        MOV     A,R7
        XRL     A,#0x80
??WiFiGate_ProcessEvent_1:
        MOV     R3,A
        LJMP    ??WiFiGate_ProcessEvent_2 & 0xFFFF
//  109   }
//  110   else
//  111   {//»Áπ˚ «”√ªß◊‘∂®“Â»ŒŒÒ
//  112 	if(events & WIFI_PROCESS_PRODIC){
??WiFiGate_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??WiFiGate_ProcessEvent_3 & 0xFFFF
//  113 	    osal_start_timerEx( WiFiGate_TaskId, WIFI_PROCESS_PRODIC,100);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#WiFiGate_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  114 		switch(ConnectState)
        MOV     R4,#`?<Constant "OK">` & 0xff
        MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
        MOV     DPTR,#ConnectState
        MOVX    A,@DPTR
        JZ      ??WiFiGate_ProcessEvent_4
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_5
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_6
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_6
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_6
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_7
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_8
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_9
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_10
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??WiFiGate_ProcessEvent_11 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??WiFiGate_ProcessEvent_12 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??WiFiGate_ProcessEvent_13 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??WiFiGate_ProcessEvent_14 & 0xFFFF
        LJMP    ??WiFiGate_ProcessEvent_15 & 0xFFFF
//  115 		{
//  116 			case 0:
//  117 				P1_5 = 0;
??WiFiGate_ProcessEvent_4:
        CLR     0x90.5
        SJMP    ??WiFiGate_ProcessEvent_6
//  118 				ConnectState++;
//  119 				break; 
//  120 			case 1:
//  121 				P1_5 = 1;
??WiFiGate_ProcessEvent_5:
        SETB    0x90.5
//  122 				ConnectState++; 
//  123 				break;
//  124 			case 2:
//  125 			case 3:
//  126 			case 4:
//  127 				ConnectState++; 
??WiFiGate_ProcessEvent_6:
        MOV     DPTR,#ConnectState
        MOVX    A,@DPTR
        INC     A
??WiFiGate_ProcessEvent_16:
        MOVX    @DPTR,A
//  128 				break;
        LJMP    ??WiFiGate_ProcessEvent_15 & 0xFFFF
//  129 			break;	  
//  130 			case 5:
//  131 				  switch(WiFi_Send_ATCommand("AT\r\n",20,5,"OK"))
??WiFiGate_ProcessEvent_7:
        ; Setup parameters for call to function WiFi_Send_ATCommand
        MOV     DPTR,#__Constant_14
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,#0x5
        MOV     R2,#`?<Constant "AT\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT\\r\\n">` >> 8) & 0xff
??WiFiGate_ProcessEvent_17:
        LCALL   ??WiFi_Send_ATCommand?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_18
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_6
        LJMP    ??WiFiGate_ProcessEvent_15 & 0xFFFF
//  132 				  {
//  133 					case WIFI_RSP_OK:
//  134 						 ConnectState++;
//  135 					break;
//  136 					case WIFI_RSP_TIMEOUT:
//  137 						 ConnectState = 0xff;
??WiFiGate_ProcessEvent_18:
        MOV     DPTR,#ConnectState
        MOV     A,#-0x1
        SJMP    ??WiFiGate_ProcessEvent_16
//  138 					break;  				  
//  139 				  }
//  140 				break;
//  141 			case 6:
//  142 				  switch(WiFi_Send_ATCommand("AT+CWMODE=3\r\n",20,5,"OK"))
??WiFiGate_ProcessEvent_8:
        ; Setup parameters for call to function WiFi_Send_ATCommand
        MOV     DPTR,#__Constant_14
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,#0x5
        MOV     R2,#`?<Constant "AT+CWMODE=3\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWMODE=3\\r\\n">` >> 8) & 0xff
        SJMP    ??WiFiGate_ProcessEvent_17
        CFI CFA_XSP16 add(XSP16, 10)
//  143 				  {
//  144 					case WIFI_RSP_OK:
//  145 						 ConnectState++;
//  146 					break;
//  147 					case WIFI_RSP_TIMEOUT:
//  148 						 ConnectState = 0xff;
//  149 					break;  				  
//  150 				  }
//  151 				break;	
//  152 			case 7:
//  153 				  switch(WiFi_Send_ATCommand(WIFI_AP,30,10,"OK"))
??WiFiGate_ProcessEvent_9:
        ; Setup parameters for call to function WiFi_Send_ATCommand
        MOV     DPTR,#__Constant_1e
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,#0xa
        MOV     R2,#`?<Constant "AT+CWJAP=\\"zkk_2.4g\\",\\"...">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWJAP=\\"zkk_2.4g\\",\\"...">` >> 8) & 0xff
        SJMP    ??WiFiGate_ProcessEvent_17
        CFI CFA_XSP16 add(XSP16, 10)
//  154 				  {
//  155 					case WIFI_RSP_OK:
//  156 						 ConnectState++;
//  157 					break;
//  158 					case WIFI_RSP_TIMEOUT:
//  159 						 ConnectState = 0xff;
//  160 					break;  				  
//  161 				  }
//  162 				break;
//  163 			case 8:
//  164 				  switch(WiFi_Send_ATCommand(OneNET_IP,20,5,"OK"))
??WiFiGate_ProcessEvent_10:
        ; Setup parameters for call to function WiFi_Send_ATCommand
        MOV     DPTR,#__Constant_14
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,#0x5
        MOV     R2,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` >> 8) & 0xff
        LCALL   ??WiFi_Send_ATCommand?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        DEC     A
        JZ      ??WiFiGate_ProcessEvent_18
        DEC     A
        JZ      $+5
        LJMP    ??WiFiGate_ProcessEvent_15 & 0xFFFF
//  165 				  {
//  166 					case WIFI_RSP_OK:
//  167 						 ConnectState = 10;
        MOV     DPTR,#ConnectState
        MOV     A,#0xa
        SJMP    ??WiFiGate_ProcessEvent_16
//  168 					break;
//  169 					case WIFI_RSP_TIMEOUT:
//  170 						 ConnectState = 0xff;
//  171 					break;  				  
//  172 				  }
//  173 				break;		
//  174 	
//  175 			case 10:
//  176 				  switch(WiFi_Send_ATCommand(CIPMODE,20,0,"OK"))
??WiFiGate_ProcessEvent_11:
        ; Setup parameters for call to function WiFi_Send_ATCommand
        MOV     DPTR,#__Constant_14
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,#0x0
        MOV     R2,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
        SJMP    ??WiFiGate_ProcessEvent_17
        CFI CFA_XSP16 add(XSP16, 10)
//  177 				  {
//  178 					case WIFI_RSP_OK:
//  179 						 ConnectState++;
//  180 					break;
//  181 					case WIFI_RSP_TIMEOUT:
//  182 						 ConnectState = 0xff;
//  183 					break;  				  
//  184 				  }
//  185 				break;	
//  186 			case 11:
//  187 				  switch(WiFi_Send_ATCommand(CIPSEND,20,0,"OK"))
??WiFiGate_ProcessEvent_12:
        ; Setup parameters for call to function WiFi_Send_ATCommand
        MOV     DPTR,#__Constant_14
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,#0x0
        MOV     R2,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
        SJMP    ??WiFiGate_ProcessEvent_17
        CFI CFA_XSP16 add(XSP16, 10)
//  188 				  {
//  189 					case WIFI_RSP_OK:
//  190 						 ConnectState++;
//  191 					break;
//  192 					case WIFI_RSP_TIMEOUT:
//  193 						 ConnectState = 0xff;
//  194 					break;  				  
//  195 				  }
//  196 				break;		
//  197 			case 12:
//  198 				  //WiFi_Send_ATCommand(CONNECT_ONENET_KEYSTRING,20,0,"");   //Ã¯π˝◊¢≤·µΩONENETµƒ≤Ÿ◊˜
//  199 				  ConnectState++;
??WiFiGate_ProcessEvent_13:
        MOV     A,#0xd
        MOVX    @DPTR,A
//  200 				  WiFiRecvLenght = 0;
        MOV     DPTR,#WiFiRecvLenght
        CLR     A
        MOVX    @DPTR,A
//  201 				  WiFiModeInitDone = 1;
        MOV     DPTR,#WiFiModeInitDone
        INC     A
        MOVX    @DPTR,A
//  202 				  memset((void*)WiFiRecvDataBuffer,0,WIFI_RECV_DATA_BUFFER_LEN);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#-0x80
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  203                                   WiFi_LED_SET(0x0700);
        ; Setup parameters for call to function WiFi_LED_SET
        MOV     DPTR,#__Constant_700
        LCALL   ?XLOAD_R2345
        LCALL   ??WiFi_LED_SET?relay
//  204 				break;	
        SJMP    ??WiFiGate_ProcessEvent_15
//  205 			case 13:
//  206 				  len = GET_RECV_LENGHT();
??WiFiGate_ProcessEvent_14:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        LCALL   ?Subroutine4 & 0xFFFF
//  207 				  if(len){
??CrossCallReturnLabel_10:
        JZ      ??CrossCallReturnLabel_1
//  208 					if((WiFiRecvLenght+len) >= (WIFI_RECV_DATA_BUFFER_LEN-1)){
        MOV     DPTR,#WiFiRecvLenght
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        SUBB    A,#0x7f
        MOV     A,R1
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??WiFiGate_ProcessEvent_19
//  209 						WiFiRecvLenght = 0;
        LCALL   ?Subroutine3 & 0xFFFF
//  210 						memset((void*)WiFiRecvDataBuffer,0,WIFI_RECV_DATA_BUFFER_LEN);
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  211 						printf("overflow\r\n");
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "overflow\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "overflow\\r\\n">` >> 8) & 0xff
        LCALL   ??printf?relay
//  212 					}						
//  213 					GET_RECV_DATA(&WiFiRecvDataBuffer[WiFiRecvLenght],len);
??WiFiGate_ProcessEvent_19:
        ; Setup parameters for call to function HalUARTRead
        MOV     DPTR,#len
        MOVX    A,@DPTR
        LCALL   ?Subroutine1 & 0xFFFF
//  214 					WiFiRecvLenght = WiFiRecvLenght + len;			
//  215 				  }
//  216 				  if((WiFiRecvLenght)&&(!strstr((const char*)WiFiRecvDataBuffer,(const char*)"$"))){//√ª”–~’‚∏ˆ∑˚∫≈
??CrossCallReturnLabel_1:
        MOV     DPTR,#WiFiRecvLenght
        MOVX    A,@DPTR
        JZ      ??WiFiGate_ProcessEvent_20
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "$">` & 0xff
        MOV     R5,#(`?<Constant "$">` >> 8) & 0xff
        MOV     R2,#WiFiRecvDataBuffer & 0xff
        MOV     R3,#(WiFiRecvDataBuffer >> 8) & 0xff
        LCALL   ??strstr?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??WiFiGate_ProcessEvent_20
//  217 				  	WiFiRecvLenght = 0;
        MOV     DPTR,#WiFiRecvLenght
        LCALL   ?Subroutine3 & 0xFFFF
//  218 					memset((void*)WiFiRecvDataBuffer,0,WIFI_RECV_DATA_BUFFER_LEN);
//  219 				  }
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  220 
//  221 				  memset((void*)WiFiRecvDataBuffer,0,WIFI_RECV_DATA_BUFFER_LEN); 		  
??WiFiGate_ProcessEvent_20:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#-0x80
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  222 			    break;
//  223 		}		
//  224 		return (events ^ WIFI_PROCESS_PRODIC);
??WiFiGate_ProcessEvent_15:
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        LJMP    ??WiFiGate_ProcessEvent_1 & 0xFFFF
//  225 	}
//  226   }//if(events & WIFI_PROCESS_PRODIC){
//  227   return 0;
??WiFiGate_ProcessEvent_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock2
??WiFiGate_ProcessEvent_2:
        REQUIRE ?Subroutine0
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0
//  228 } 

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     DPTR,#len
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function memset
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#-0x80
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#WiFiRecvDataBuffer & 0xff
        MOV     R3,#(WiFiRecvDataBuffer >> 8) & 0xff
        LCALL   ??memset?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPTR,#WiFiRecvLenght
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#WiFiRecvDataBuffer & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(WiFiRecvDataBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     DPTR,#len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#WiFiRecvLenght
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  229 
//  230 
//  231 
//  232 
//  233 /*
//  234 ∑¢ÀÕ ˝æ›µΩWIFIÕ¯¬Á…œ
//  235 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  236 uint8  SendToWiFiNetwork(uint8 *pData,uint8 len)
SendToWiFiNetwork:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function SendToWiFiNetwork
        CODE
//  237 {
        FUNCALL SendToWiFiNetwork, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  238   if(WiFiModeInitDone)
        MOV     DPTR,#WiFiModeInitDone
        MOVX    A,@DPTR
        JZ      ??SendToWiFiNetwork_0
//  239   {
//  240     SEND_TO_WIFI(pData,len);
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 0,R6
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  241 	return 1;
        MOV     R1,#0x1
        SJMP    ??SendToWiFiNetwork_1
//  242   }
//  243   return 0;
??SendToWiFiNetwork_0:
        MOV     R1,#0x0
??SendToWiFiNetwork_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock19
//  244 }
//  245 
//  246 /***********************************************************************************
//  247 * ∫Ø ˝√˚≥∆        WiFi_LED_REST()
//  248 *
//  249 * ∫Ø ˝π¶ƒ‹        ¿≠µÕµÁ∆Ωµ»¥˝
//  250 *
//  251 * »Îø⁄≤Œ ˝        Œﬁ
//  252 *
//  253 * ∑µªÿ≤Œ ˝        Œﬁ 
//  254 *
//  255 * Àµ√˜            
//  256 ***********************************************************************************/
//  257 /* ¿≠µÕµÁ∆Ωµ»¥˝œ¬“ª¥Œ√¸¡Ó  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  258 void WiFi_LED_REST(void)
WiFi_LED_REST:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function WiFi_LED_REST
        CODE
//  259 {
        FUNCALL WiFi_LED_REST, delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  260     WiFi_LED = 0;
        CLR     0x90.6
//  261     delay_ms(1);  
        ; Setup parameters for call to function delay_ms
        MOV     DPTR,#__Constant_1
        LCALL   ?XLOAD_R2345
        LCALL   ??delay_ms?relay
//  262 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock20
        REQUIRE _A_P1
//  263 
//  264 //==========================================================
//  265 //	∫Ø ˝√˚≥∆£∫	WiFi_LED_SET()
//  266 //
//  267 //	∫Ø ˝π¶ƒ‹£∫	…Ë÷√—’…´
//  268 //
//  269 //	»Îø⁄≤Œ ˝£∫	G8R8B8:—’…´
//  270 //
//  271 //	∑µªÿ≤Œ ˝£∫	Œﬁ
//  272 //
//  273 //	Àµ√˜£∫		
//  274 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  275 void WiFi_LED_SET(uint32 G8R8B8)
WiFi_LED_SET:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function WiFi_LED_SET
        CODE
//  276 {
        FUNCALL WiFi_LED_SET, WiFi_LED_REST
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  277     static int i = 0;
//  278     static unsigned char byte = 0;
//  279     
//  280     for(i=23;i>=0;i--)
        MOV     DPTR,#??i
        MOV     A,#0x17
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  281     {
//  282         byte = ((G8R8B8 >> i) & 0x01);
??WiFi_LED_SET_0:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        ANL     A,#0x1
        MOV     DPTR,#??byte
        MOVX    @DPTR,A
//  283         if(byte == 1)
        MOV     C,0xE0 /* A   */.0
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        JNC     ??WiFi_LED_SET_1
//  284         {
//  285             WiFi_LED_HI;//1
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SJMP    ??WiFi_LED_SET_2
//  286         }
//  287         else
//  288         {
//  289             WiFi_LED_LO; //0
??WiFi_LED_SET_1:
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
??WiFi_LED_SET_2:
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  290         }
//  291     }
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??WiFi_LED_SET_0
//  292     WiFi_LED_REST();
        ; Setup parameters for call to function WiFi_LED_REST
        LCALL   ??WiFi_LED_REST?relay
//  293 }
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
        REQUIRE _A_P1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??i:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??byte:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  294 
//  295 //==========================================================
//  296 //	∫Ø ˝√˚≥∆£∫	WiFi_Set_White()
//  297 //
//  298 //	∫Ø ˝π¶ƒ‹£∫	∞◊…´
//  299 //
//  300 //	»Îø⁄≤Œ ˝£∫	Œﬁ
//  301 //
//  302 //	∑µªÿ≤Œ ˝£∫	Œﬁ
//  303 //
//  304 //	Àµ√˜£∫		
//  305 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  306 void WiFi_Set_White(void)
WiFi_Set_White:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function WiFi_Set_White
        CODE
//  307 {
        ; Saved register size: 0
        ; Auto size: 0
//  308   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  309   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  310   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  311   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  312   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  313   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  314   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  315   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  316   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  317   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  318 
//  319   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  320   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  321   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  322   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  323   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  324   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  325   
//  326   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  327   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  328   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  329   WiFi_LED_HI;  
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  330   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  331   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  332   WiFi_LED_HI;
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  333   WiFi_LED_HI;  
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        SETB    0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
        CLR     0x90.6
//  334 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock22
        REQUIRE _A_P1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WiFiGate_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WiFiGate_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WiFi_Send_ATCommand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WiFi_Send_ATCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WiFiGate_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WiFiGate_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendToWiFiNetwork?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendToWiFiNetwork

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WiFi_LED_REST?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WiFi_LED_REST

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WiFi_LED_SET?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WiFi_LED_SET

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WiFi_Set_White?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WiFi_Set_White

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "WiFi>>>:%s\\r\\n">`:
        DB "WiFi>>>:%s\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT\\r\\n">`:
        DB "AT\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWMODE=3\\r\\n">`:
        DB "AT+CWMODE=3\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWJAP=\\"zkk_2.4g\\",\\"...">`:
        DB "AT+CWJAP=\"zkk_2.4g\",\"18696560024\"\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">`:
        DB "AT+CIPSTART=\"TCP\",\"192.168.3.213\",9080\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMODE=1\\r\\n">`:
        DB "AT+CIPMODE=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND\\r\\n">`:
        DB "AT+CIPSEND\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "overflow\\r\\n">`:
        DB "overflow\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "$">`:
        DB "$"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_14:
        DD 20

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1e:
        DD 30

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_700:
        DD 1792

        END
// 
// 1 518 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//   173 bytes in segment XDATA_ROM_C
//   144 bytes in segment XDATA_Z
// 
// 1 560 bytes of CODE  memory
//   153 bytes of CONST memory (+ 20 bytes shared)
//     0 bytes of DATA  memory (+  4 bytes shared)
//   144 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
