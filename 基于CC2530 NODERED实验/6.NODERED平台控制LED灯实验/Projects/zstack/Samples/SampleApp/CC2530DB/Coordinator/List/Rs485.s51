///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        01/May/2023  08:14:44 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Components\HARDWARE\Rs485.c                   /
//    Command line       =  -f D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-L /
//                          ED¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wCoord.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF11                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½ /
//                          Ì³Ì\CC2530\NODERED-LED¿ØÖÆ\Components\HARDWARE\Rs /
//                          485.c -D ZIGBEEPRO -D ZTOOL_P1 -D MT_SYS_FUNC -D  /
//                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D            /
//                          NV_RESTORE -lC D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC25 /
//                          30\NODERED-LED¿ØÖÆ\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\Coordinator\List\ -lA                /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinator\List\ --diag_suppress Pe001,Pa010 -o    /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinator\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-L /
//                          ED¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\SOURCE\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC25 /
//                          30\NODERED-LED¿ØÖÆ\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I          /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MT\ -I                    /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I           /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I   /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I          /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\AF\ -I              /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\NWK\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SEC\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I            /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SYS\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\F8W\ -I              /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\ -I                  /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I           /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I   /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL /
//                          E_CHIP\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\N /
//                          ODERED-LED¿ØÖÆ\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HARDWARE\ -Ohz /
//    List file          =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinator\List\Rs485.s51                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Rs485

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CRC_16?relay
        FUNCTION ??CRC_16?relay,0203H
        PUBLIC ??DataHandling_485?relay
        FUNCTION ??DataHandling_485?relay,0203H
        PUBLIC ??Rs485_Init?relay
        FUNCTION ??Rs485_Init?relay,0203H
        PUBLIC ??Rs485_Receive?relay
        FUNCTION ??Rs485_Receive?relay,0203H
        PUBLIC ??Rs485_Send?relay
        FUNCTION ??Rs485_Send?relay,0203H
        PUBLIC ??Rs485_delay_ms?relay
        FUNCTION ??Rs485_delay_ms?relay,0203H
        PUBLIC ??Rx_Stack_Init?relay
        FUNCTION ??Rx_Stack_Init?relay,0203H
        PUBLIC ??Tx_Stack_Init?relay
        FUNCTION ??Tx_Stack_Init?relay,0203H
        PUBLIC ??calcByte?relay
        FUNCTION ??calcByte?relay,0203H
        PUBLIC CRC_16
        FUNCTION CRC_16,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC DataHandling_485
        FUNCTION DataHandling_485,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC Receive_Data
        PUBLIC Rs485_Init
        FUNCTION Rs485_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Rs485_Receive
        FUNCTION Rs485_Receive,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC Rs485_Send
        FUNCTION Rs485_Send,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Rs485_delay_ms
        FUNCTION Rs485_delay_ms,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Rx_Stack
        PUBLIC Rx_Stack_Init
        FUNCTION Rx_Stack_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Send_Data
        PUBLIC Tx_Stack
        PUBLIC Tx_Stack_Init
        FUNCTION Tx_Stack_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_e1e2e3e4
        PUBWEAK __Constant_eaebeced
        PUBLIC calcByte
        FUNCTION calcByte,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
memset              SYMBOL "memset"
USART1_SendString   SYMBOL "USART1_SendString"
??USART1_SendString?relay SYMBOL "?relay", USART1_SendString
??memset?relay      SYMBOL "?relay", memset
CRC_16              SYMBOL "CRC_16"
??CRC_16?relay      SYMBOL "?relay", CRC_16
DataHandling_485    SYMBOL "DataHandling_485"
??DataHandling_485?relay SYMBOL "?relay", DataHandling_485
Rs485_Init          SYMBOL "Rs485_Init"
??Rs485_Init?relay  SYMBOL "?relay", Rs485_Init
Rs485_Receive       SYMBOL "Rs485_Receive"
??Rs485_Receive?relay SYMBOL "?relay", Rs485_Receive
Rs485_Send          SYMBOL "Rs485_Send"
??Rs485_Send?relay  SYMBOL "?relay", Rs485_Send
Rs485_delay_ms      SYMBOL "Rs485_delay_ms"
??Rs485_delay_ms?relay SYMBOL "?relay", Rs485_delay_ms
Rx_Stack_Init       SYMBOL "Rx_Stack_Init"
??Rx_Stack_Init?relay SYMBOL "?relay", Rx_Stack_Init
Tx_Stack_Init       SYMBOL "Tx_Stack_Init"
??Tx_Stack_Init?relay SYMBOL "?relay", Tx_Stack_Init
calcByte            SYMBOL "calcByte"
??calcByte?relay    SYMBOL "?relay", calcByte

        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN USART1_SendString
        FUNCTION USART1_SendString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??USART1_SendString?relay
        FUNCTION ??USART1_SendString?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN USART1_RX_STA

// D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ØÖÆ\Components\HARDWARE\Rs485.c
//    1 #include "stdlib.h"
//    2 #include "string.h"
//    3 #include "stdio.h"
//    4 #include "Rs485.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    5 #include "usart.h"
//    6 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    7 unsigned char  Send_Data[Send_REC_LEN];         //·¢ËÍ»º³å,×î´óSend_REC_LEN¸ö×Ö½Ú
Send_Data:
        DS 200
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    8 unsigned char  Receive_Data[Receive_REC_LEN];   //½ÓÊÕ»º³å,×î´óSend_REC_LEN¸ö×Ö½Ú
Receive_Data:
        DS 200
        REQUIRE __INIT_XDATA_Z
//    9 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   10 Send_Stack Tx_Stack;				//485·¢ËÍÊý¾Ý½á¹¹Ìå
Tx_Stack:
        DS 218
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   11 Receive_Stack Rx_Stack;				//485½ÓÊÕÊý¾Ý½á¹¹Ìå
Rx_Stack:
        DS 218
        REQUIRE __INIT_XDATA_Z
//   12 
//   13 //==========================================================
//   14 //	º¯ÊýÃû³Æ£º	Rs485_Init()
//   15 //
//   16 //	º¯Êý¹¦ÄÜ£º	³õÊ¼»¯485
//   17 //
//   18 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   19 //
//   20 //	·µ»Ø²ÎÊý£º	ÎÞ
//   21 //
//   22 //	ËµÃ÷£º		
//   23 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   24 void Rs485_Init(void)
Rs485_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Rs485_Init
        CODE
//   25 {
        FUNCALL Rs485_Init, Rx_Stack_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rs485_Init, Tx_Stack_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   26     P1SEL &= ~0x80;     //ÉèÖÃP1.3ÎªÆÕÍ¨IO¿Ú  
        ANL     0xf4,#0x7f
//   27     P1DIR |= 0x08;      // P1.3¶¨ÒåÎªÊä³ö
        ORL     0xfe,#0x8
//   28     RS485_RX_EN();      //³õÊ¼»¯Îª½ÓÊÕÄ£Ê½
        CLR     0x90.3
//   29 
//   30     Rx_Stack_Init();	//³õÊ¼»¯½ÓÊÕ½á¹¹Ìå
        ; Setup parameters for call to function Rx_Stack_Init
        LCALL   ??Rx_Stack_Init?relay
//   31     Tx_Stack_Init();	//³õÊ¼»¯·¢ËÍ½á¹¹Ìå
        ; Setup parameters for call to function Tx_Stack_Init
        LCALL   ??Tx_Stack_Init?relay
        CFI EndBlock cfiBlock0
//   32 }
        REQUIRE ?Subroutine0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//   33 
//   34 //==========================================================
//   35 //	º¯ÊýÃû³Æ£º	Tx_Stack_Init
//   36 //
//   37 //	º¯Êý¹¦ÄÜ£º	RFIDÄ£¿éÉÏ·¢Êý¾Ý½á¹¹Ìå³õÊ¼»¯
//   38 //
//   39 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   40 //              
//   41 //	·µ»Ø²ÎÊý£º	ÎÞ
//   42 //
//   43 //	ËµÃ÷£º		
//   44 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   45 void Tx_Stack_Init(void)
Tx_Stack_Init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Tx_Stack_Init
        CODE
//   46 {
        FUNCALL Tx_Stack_Init, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   47   Tx_Stack.Head = 0xE1E2E3E4;			//Ö¡Í·
        MOV     DPTR,#__Constant_e1e2e3e4
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#Tx_Stack
        LCALL   ?XSTORE_R2345
//   48   Tx_Stack.Pack_Num = 0x00;			//°üÐòºÅ
        MOV     DPTR,#Tx_Stack + 4
        LCALL   ?Subroutine4 & 0xFFFF
//   49   Tx_Stack.Src_Adr = 0x0000;			//Ô´µØÖ·
//   50   Tx_Stack.Dst_Adr = 0x0000;			//Ä¿µÄµØÖ·
//   51   Tx_Stack.State = 0x0000;			//×´Ì¬Âë
//   52   Tx_Stack.Data_Len = 0x00;			//Êý¾Ý³¤¶È
//   53   memset(Tx_Stack.Data, 0, sizeof(Tx_Stack.Data));//Êý¾ÝÊý×éÈ«²¿Çå¿Õ
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#(Tx_Stack + 12) & 0xff
        MOV     R3,#((Tx_Stack + 12) >> 8) & 0xff
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   54   Tx_Stack.CrcCheck = 0x0000;		        //CRCÐ£ÑéÂë
        MOV     DPTR,#Tx_Stack + 212
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   55   Tx_Stack.Tail = 0xEAEBECED;			//Ö¡Î²
        MOV     DPTR,#__Constant_eaebeced
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#Tx_Stack + 214
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//   56 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?XSTORE_R2345
        CFI EndBlock cfiBlock3
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//   57 
//   58 //==========================================================
//   59 //	º¯ÊýÃû³Æ£º	Rx_Stack_Init
//   60 //
//   61 //	º¯Êý¹¦ÄÜ£º	ÉÏÎ»»úÏÂ·¢Êý¾Ý½á¹¹Ìå³õÊ¼»¯
//   62 //
//   63 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   64 //              
//   65 //	·µ»Ø²ÎÊý£º	ÎÞ
//   66 //
//   67 //	ËµÃ÷£º		
//   68 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   69 void Rx_Stack_Init(void)
Rx_Stack_Init:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function Rx_Stack_Init
        CODE
//   70 {
        FUNCALL Rx_Stack_Init, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   71   Rx_Stack.Head = 0xE1E2E3E4;		        //Ö¡Í·
        MOV     DPTR,#__Constant_e1e2e3e4
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#Rx_Stack
        LCALL   ?XSTORE_R2345
//   72   Rx_Stack.Pack_Num = 0x00;		        //°üÐòºÅ
        MOV     DPTR,#Rx_Stack + 4
        LCALL   ?Subroutine4 & 0xFFFF
//   73   Rx_Stack.Src_Adr = 0x0000;			//Ô´µØÖ·
//   74   Rx_Stack.Dst_Adr = 0x0000;			//Ä¿µÄµØÖ·
//   75   Rx_Stack.Command = 0x0000;			//ÃüÁîÂë
//   76   Rx_Stack.Data_Len = 0x00;			//Êý¾Ý³¤¶È						
//   77   memset(Rx_Stack.Data, 0, sizeof(Rx_Stack.Data));//Êý¾ÝÊý×éÈ«²¿Çå¿Õ
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#(Rx_Stack + 12) & 0xff
        MOV     R3,#((Rx_Stack + 12) >> 8) & 0xff
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   78   Rx_Stack.CrcCheck = 0x0000;			//CRCÐ£ÑéÂë
        MOV     DPTR,#Rx_Stack + 212
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   79   Rx_Stack.Tail = 0xEAEBECED;			//Ö¡Î²
        MOV     DPTR,#__Constant_eaebeced
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#Rx_Stack + 214
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock5
//   80 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function memset
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#-0x38
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//   81 
//   82 //==========================================================
//   83 //	º¯ÊýÃû³Æ£º	Rs485_Send()
//   84 //
//   85 //	º¯Êý¹¦ÄÜ£º	·¢ËÍÊý¾Ýµ½485×ÜÏßÉÏ
//   86 //
//   87 //	Èë¿Ú²ÎÊý£º	SrcAdr:Ô´µØÖ·
//   88 //			DstAdr:Ä¿µÄµØÖ·
//   89 //			Cmd		:ÃüÁîÂë
//   90 //			Len		:Êý¾Ý³¤¶È
//   91 //			*pData:Êý¾Ý
//   92 //
//   93 //	·µ»Ø²ÎÊý£º	ÎÞ
//   94 //
//   95 //	ËµÃ÷£º		
//   96 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   97 void Rs485_Send(uint16_t SrcAdr,uint16_t DstAdr,uint16_t Cmd,uint8_t Len,uint8_t *pData)
Rs485_Send:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function Rs485_Send
        CODE
//   98 {
        FUNCALL Rs485_Send, CRC_16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rs485_Send, Rs485_delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rs485_Send, USART1_SendString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rs485_Send, Rs485_delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//   99   static uint16_t i = 0;	            //Çå¿ÕÊý×éÊ±ForÑ­»·Ê¹ÓÃ	
//  100   
//  101   for(i=0;i<4;i++)
        MOV     DPTR,#??i
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  102   {
//  103      Send_Data[i] = (0xE1+i);		    //Ö¡Í·
??Rs485_Send_0:
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#-0x1f
        PUSH    A
        CFI CFA_SP SP+-1
        MOVX    A,@DPTR
        ADD     A,#Send_Data & 0xff
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(Send_Data >> 8) & 0xff
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
//  104   }
??CrossCallReturnLabel_0:
        MOV     DPTR,#??i
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??Rs485_Send_0
//  105 
//  106   if(Tx_Stack.Pack_Num>=255)
        MOV     DPTR,#Tx_Stack + 4
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??Rs485_Send_1
//  107   {
//  108      Tx_Stack.Pack_Num = 0;	
        CLR     A
        MOVX    @DPTR,A
//  109   }
//  110   Send_Data[4] = Tx_Stack.Pack_Num;	    //°üÐòºÅ	
??Rs485_Send_1:
        MOVX    A,@DPTR
        MOV     DPTR,#Send_Data + 4
        MOVX    @DPTR,A
//  111   Tx_Stack.Pack_Num++;
        MOV     DPTR,#Tx_Stack + 4
        INC     A
        MOVX    @DPTR,A
//  112   Send_Data[5] = SrcAdr>>8;
        MOV     A,R3
        MOV     DPTR,#Send_Data + 5
        MOVX    @DPTR,A
//  113   Send_Data[6] = SrcAdr;		    //Ô´µØÖ·
        MOV     A,R2
        INC     DPTR
        MOVX    @DPTR,A
//  114   Send_Data[7] = DstAdr>>8;
        MOV     A,R5
        INC     DPTR
        MOVX    @DPTR,A
//  115   Send_Data[8] = DstAdr;		    //Ä¿µÄµØÖ·
        MOV     A,R4
        INC     DPTR
        MOVX    @DPTR,A
//  116   Send_Data[9] = Cmd>>8;
        MOV     A,?V0 + 3
        INC     DPTR
        MOVX    @DPTR,A
//  117   Send_Data[10] = Cmd;			    //ÃüÁîÂë
        MOV     A,?V0 + 2
        INC     DPTR
        MOVX    @DPTR,A
//  118   Send_Data[11] = Len;			    //Êý¾Ý³¤¶È
        MOV     A,?V0 + 0
        INC     DPTR
        MOVX    @DPTR,A
//  119   for(i=12;i<(Len+12);i++)
        MOV     DPTR,#??i
        MOV     A,#0xc
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     R6,DPL
        MOV     A,R6
        ADD     A,#0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
        SJMP    ??CrossCallReturnLabel_1
//  120   {
//  121       Send_Data[i] = pData[i-12];	    //Êý¾Ý
??Rs485_Send_2:
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R0
        ADD     A,R2
        MOV     R2,A
        MOV     A,R1
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R2
        ADD     A,#-0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#Send_Data & 0xff
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(Send_Data >> 8) & 0xff
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
//  122   }
??CrossCallReturnLabel_1:
        MOV     DPTR,#??i
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R5
        JC      ??Rs485_Send_2
//  123   Tx_Stack.CrcCheck = CRC_16(Send_Data,(12+Len));//CRCÐ£ÑéÂë
        ; Setup parameters for call to function CRC_16
        MOV     R2,#Send_Data & 0xff
        MOV     R3,#(Send_Data >> 8) & 0xff
        LCALL   ??CRC_16?relay
        MOV     DPTR,#Tx_Stack + 212
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  124   Send_Data[12+Len] = Tx_Stack.CrcCheck>>8;
        MOV     A,#Send_Data & 0xff
        ADD     A,R6
        MOV     R0,A
        MOV     A,#(Send_Data >> 8) & 0xff
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,R3
        MOVX    @DPTR,A
//  125   Send_Data[13+Len] = Tx_Stack.CrcCheck;    //CRCÐ£ÑéÂë
        MOV     DPTR,#Tx_Stack + 212
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  126   for(i=(14+Len);i<(18+Len);i++)
        MOV     A,R6
        ADD     A,#0xe
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#??i
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x12
        MOV     R6,A
        CLR     A
        ADDC    A,#0x0
        MOV     R7,A
        SJMP    ??CrossCallReturnLabel_2
//  127   {
//  128       Send_Data[i] = (0xEA+(i-14-Len));     //Ö¡Î²
??Rs485_Send_3:
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#-0xe
        CLR     C
        SUBB    A,?V0 + 0
        ADD     A,#-0x16
        PUSH    A
        CFI CFA_SP SP+-1
        MOVX    A,@DPTR
        ADD     A,#Send_Data & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(Send_Data >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
//  129   }
??CrossCallReturnLabel_2:
        MOV     DPTR,#??i
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R6
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        JC      ??Rs485_Send_3
//  130 
//  131   RS485_TX_EN();//¿ªÆô485·¢ËÍ
        SETB    0x90.3
//  132   Rs485_delay_ms(5);
        ; Setup parameters for call to function Rs485_delay_ms
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Rs485_delay_ms?relay
//  133   USART1_SendString(Send_Data,(18+Len));    //485·¢ËÍÊý¾Ý
        ; Setup parameters for call to function USART1_SendString
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#Send_Data & 0xff
        MOV     R3,#(Send_Data >> 8) & 0xff
        LCALL   ??USART1_SendString?relay
//  134   Rs485_delay_ms(5);
        ; Setup parameters for call to function Rs485_delay_ms
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Rs485_delay_ms?relay
//  135   RS485_RX_EN();//¿ªÆô485½ÓÊÕ
        CLR     0x90.3
        CFI EndBlock cfiBlock9
//  136 }
        REQUIRE ?Subroutine2
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#??i
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??i:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  137 
//  138 //==========================================================
//  139 //	º¯ÊýÃû³Æ£º	Rs485_Receive()
//  140 //
//  141 //	º¯Êý¹¦ÄÜ£º	485½ÓÊÕ
//  142 //
//  143 //	Èë¿Ú²ÎÊý£º	data:485Êý¾Ý
//  144 //
//  145 //	·µ»Ø²ÎÊý£º	ÎÞ
//  146 //
//  147 //	ËµÃ÷£º		
//  148 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  149 void Rs485_Receive(uint8_t data)
Rs485_Receive:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function Rs485_Receive
        CODE
//  150 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  151     static uint8_t End_Flag     = 0;	//Ö¡Î²±êÖ¾Î»
//  152     static uint8_t Header_Flag  = 0;	//Ö¡Í·±êÖ¾Î»
//  153     static uint8_t Receive_Flag = 0;	//½ÓÊÕ±êÖ¾Î»
//  154 
//  155 /*
//  156 *
//  157 *	Ö¡Í·½ÓÊÕ
//  158 *
//  159 */
//  160     /*Ö¡Í·1 Êý¾ÝÖ¡Í·ÖÐµÚÒ»¸ö×Ö½Ú*/
//  161     if(data == 0xE1) Header_Flag = 1;
        MOV     A,#-0x1f
        XRL     A,R1
        MOV     DPTR,#??Header_Flag
        JNZ     ??Rs485_Receive_0
        MOV     A,#0x1
        SJMP    ??Rs485_Receive_1
//  162 
//  163     /*Ö¡Í·2 Êý¾ÝÖ¡Í·ÖÐµÚ¶þ¸ö×Ö½Ú*/
//  164     else if(Header_Flag == 1 && data == 0xE2) Header_Flag = 2;
??Rs485_Receive_0:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Rs485_Receive_2
        MOV     A,#-0x1e
        XRL     A,R1
        JNZ     ??Rs485_Receive_3
        MOV     A,#0x2
        SJMP    ??Rs485_Receive_1
//  165 
//  166     /*Ö¡Í·3 Êý¾ÝÖ¡Í·ÖÐµÚÈý¸ö×Ö½Ú*/
//  167     else if(Header_Flag == 2 && data == 0xE3) Header_Flag = 3;
??Rs485_Receive_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??Rs485_Receive_4
        MOV     A,#-0x1d
        XRL     A,R1
        JNZ     ??Rs485_Receive_3
        MOV     A,#0x3
        SJMP    ??Rs485_Receive_1
//  168     
//  169     /*Ö¡Í·4 Êý¾ÝÖ¡Í·ÖÐµÚËÄ¸ö×Ö½Ú*/
//  170     else if(Header_Flag == 3 && data == 0xE4)
??Rs485_Receive_4:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??Rs485_Receive_3
        MOV     A,#-0x1c
        XRL     A,R1
        JNZ     ??Rs485_Receive_3
//  171     {
//  172         Receive_Data[0] = 0xE1;
        MOV     DPTR,#Receive_Data
        MOV     A,#-0x1f
        MOVX    @DPTR,A
//  173         Receive_Data[1] = 0xE2;
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  174         Receive_Data[2] = 0xE3; //Ö¡Í·½ÓÊÕÍê³É£¬´æÈëÖ¡Í·Êý¾Ý
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  175         USART1_RX_STA = 3;      //´æ·ÅÊý¾ÝÊý×éÏÂ±êÇåÁã
        MOV     DPTR,#USART1_RX_STA
        MOV     A,#0x3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  176         Receive_Flag = 1;       //¿ªÊ¼½ÓÊÕÊý¾Ý±êÖ¾Î»
        MOV     DPTR,#??Receive_Flag
        INC     A
        SJMP    ??Rs485_Receive_5
//  177     }
//  178 
//  179     else Header_Flag = 0;
??Rs485_Receive_3:
        CLR     A
??Rs485_Receive_1:
        MOVX    @DPTR,A
//  180 	
//  181 /*
//  182 *
//  183 *	Êý¾Ý+Ö¡Î²½ÓÊÕ
//  184 *
//  185 */
//  186     if(Receive_Flag)	//Ö¡Í·½ÓÊÕÍê³É,×¼±¸½ÓÊÕÖ¡Î²
        MOV     DPTR,#??Receive_Flag
        MOVX    A,@DPTR
        JZ      ??Rs485_Receive_6
//  187     {
//  188         if(USART1_RX_STA>=(Receive_REC_LEN-1))
        MOV     DPTR,#USART1_RX_STA
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x39
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??Rs485_Receive_7
//  189         {
//  190             End_Flag = 0;
        MOV     DPTR,#??End_Flag
        CLR     A
        MOVX    @DPTR,A
//  191             Receive_Flag = 0;
        MOV     DPTR,#??Receive_Flag
        MOVX    @DPTR,A
//  192             USART1_RX_STA = 0;
        MOV     DPTR,#USART1_RX_STA
        MOVX    @DPTR,A
        INC     DPTR
??Rs485_Receive_5:
        MOVX    @DPTR,A
//  193         }
//  194 
//  195         Receive_Data[USART1_RX_STA++] = data;	//Êý¾Ý½ÓÊÕ
??Rs485_Receive_7:
        MOV     DPTR,#USART1_RX_STA
        MOVX    A,@DPTR
        ADD     A,#Receive_Data & 0xff
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(Receive_Data >> 8) & 0xff
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#USART1_RX_STA
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX    @DPTR,A
//  196 
//  197         /*Ö¡Î²1 Êý¾ÝÖ¡Î²ÖÐµÚÒ»¸ö×Ö½Ú*/
//  198         if(data == 0xEA)	End_Flag = 1;
        MOV     A,#-0x16
        XRL     A,R1
        MOV     DPTR,#??End_Flag
        JNZ     ??Rs485_Receive_8
        MOV     A,#0x1
        SJMP    ??Rs485_Receive_9
//  199 
//  200         /*Ö¡Î²2  Êý¾ÝÖ¡Î²ÖÐµÚ¶þ¸ö×Ö½Ú*/
//  201         else if(End_Flag == 1 && data == 0xEB)	End_Flag = 2;
??Rs485_Receive_8:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Rs485_Receive_10
        MOV     A,#-0x15
        XRL     A,R1
        JNZ     ??Rs485_Receive_11
        MOV     A,#0x2
        SJMP    ??Rs485_Receive_9
//  202 
//  203         /*Ö¡Î²3  Êý¾ÝÖ¡Î²ÖÐµÚÈý¸ö×Ö½Ú*/
//  204         else if(End_Flag == 2 && data == 0xEC)	End_Flag = 3;
??Rs485_Receive_10:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??Rs485_Receive_12
        MOV     A,#-0x14
        XRL     A,R1
        JNZ     ??Rs485_Receive_11
        MOV     A,#0x3
        SJMP    ??Rs485_Receive_9
//  205 
//  206         /*Ö¡Î²4  Êý¾ÝÖ¡Î²ÖÐµÚËÄ¸ö×Ö½Ú*/
//  207         else if(End_Flag == 3 && data == 0xED)
??Rs485_Receive_12:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??Rs485_Receive_11
        MOV     A,#-0x13
        XRL     A,R1
        JNZ     ??Rs485_Receive_11
//  208         {
//  209             USART1_RX_STA = 0x8000;	//½ÓÊÕÍê³É
        MOV     DPTR,#USART1_RX_STA
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  210             Receive_Flag = 0;
        MOV     DPTR,#??Receive_Flag
        CLR     A
        MOVX    @DPTR,A
//  211             End_Flag = 0;
        MOV     DPTR,#??End_Flag
        SJMP    ??Rs485_Receive_9
//  212         }
//  213 
//  214         /*»¹Ã»½ÓÊÕµ½Ö¡Î²*/
//  215         else End_Flag = 0;
??Rs485_Receive_11:
        CLR     A
??Rs485_Receive_9:
        MOVX    @DPTR,A
//  216     }
//  217 }
??Rs485_Receive_6:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock15

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??End_Flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Header_Flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Receive_Flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  218 
//  219 //==========================================================
//  220 //	º¯ÊýÃû³Æ£º	DataHandling_485()
//  221 //
//  222 //	º¯Êý¹¦ÄÜ£º	485Êý¾Ý´¦Àíº¯Êý
//  223 //
//  224 //	Èë¿Ú²ÎÊý£º	DesAddr	:Ä¿µÄµØÖ·
//  225 //              
//  226 //	·µ»Ø²ÎÊý£º	0:Êý¾Ý½ÓÊÕÍê³É
//  227 //			1:Êý¾Ý½ÓÊÕ´íÎó
//  228 //
//  229 //	ËµÃ÷£º		
//  230 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  231 uint8_t DataHandling_485(uint16_t DesAddr)
DataHandling_485:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function DataHandling_485
        CODE
//  232 {
        FUNCALL DataHandling_485, CRC_16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DataHandling_485, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  233   static uint16_t i = 0;
//  234   static uint8_t Return_Value = 0;      //·µ»ØÖµ
//  235   static uint16_t Crc16Check = 0;	//´æ·ÅCRCÐ£ÑéÊý¾Ý
//  236 
//  237   if(USART1_RX_STA == 0x8000)
        MOV     DPTR,#USART1_RX_STA
        MOVX    A,@DPTR
        JNZ     ??DataHandling_485_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??DataHandling_485_0:
        MOV     DPTR,#??Return_Value
        JZ      $+5
        LJMP    ??DataHandling_485_1 & 0xFFFF
//  238   {
//  239       Return_Value = 0;
        CLR     A
        MOVX    @DPTR,A
//  240       if((Receive_Data[7]*256+Receive_Data[8]) == DesAddr)//¶Ô±ÈÔ´µØÖ·ÊÇÏëÒªµÄÊý¾Ý£¬È«²¿½ÓÊÕÏÂÀ´
        MOV     DPTR,#Receive_Data + 7
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        XRL     A,R0
        JNZ     ??DataHandling_485_2
        MOV     A,R3
        XRL     A,R1
??DataHandling_485_2:
        JZ      $+5
        LJMP    ??DataHandling_485_3 & 0xFFFF
//  241       {
//  242           /*°üÐòºÅ*/
//  243           Rx_Stack.Pack_Num = Receive_Data[4];
        MOV     DPTR,#Receive_Data + 4
        MOVX    A,@DPTR
        MOV     DPTR,#Rx_Stack + 4
        MOVX    @DPTR,A
//  244   
//  245           /*Ô´µØÖ·*/
//  246           Rx_Stack.Src_Adr = Receive_Data[5]*256+Receive_Data[6];
        MOV     DPTR,#Receive_Data + 5
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Rx_Stack + 5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  247   
//  248           /*Ä¿µÄµØÖ·*/
//  249           Rx_Stack.Dst_Adr = Receive_Data[7]*256+Receive_Data[8];
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  250   
//  251           /*ÃüÁîÂë*/
//  252           Rx_Stack.Command = Receive_Data[9]*256+Receive_Data[10];
        MOV     DPTR,#Receive_Data + 9
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Rx_Stack + 9
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  253   
//  254           /*Êý¾Ý³¤¶È*/
//  255           Rx_Stack.Data_Len = Receive_Data[11];
        MOV     DPTR,#Receive_Data + 11
        MOVX    A,@DPTR
        MOV     DPTR,#Rx_Stack + 11
        MOVX    @DPTR,A
//  256   
//  257           /*Êý¾Ý*/
//  258           for(i=12;i<(Rx_Stack.Data_Len+12);i++)
        MOV     DPTR,#??i_1
        MOV     A,#0xc
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        SJMP    ??CrossCallReturnLabel_6
//  259           {
//  260               Rx_Stack.Data[(i-12)] = Receive_Data[i];
??DataHandling_485_4:
        MOV     DPTR,#??i_1
        MOVX    A,@DPTR
        ADD     A,#Receive_Data & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(Receive_Data >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#??i_1
        MOVX    A,@DPTR
        ADD     A,#Rx_Stack & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(Rx_Stack >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  261           }
        MOV     DPTR,#??i_1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    @DPTR,A
        MOV     DPTR,#Rx_Stack + 11
        MOVX    A,@DPTR
        MOV     R0,A
        ADD     A,#0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPTR,#??i_1
        MOVX    A,@DPTR
        SUBB    A,R4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R5
        JC      ??DataHandling_485_4
//  262   
//  263           /*CRCÐ£ÑéÂë¸ß°ËÎ»*/
//  264           Rx_Stack.CrcCheck = Receive_Data[(12+Rx_Stack.Data_Len)]*256;
        MOV     A,#Receive_Data & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(Receive_Data >> 8) & 0xff
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#Rx_Stack + 212
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  265   
//  266           /*CRCÐ£ÑéÂëµÍ°ËÎ»*/
//  267           Rx_Stack.CrcCheck += Receive_Data[(13+Rx_Stack.Data_Len)];
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX    A,@DPTR
        MOV     DPTR,#Rx_Stack + 212
        MOVX    @DPTR,A
//  268           Crc16Check = CRC_16(Receive_Data,(12+Rx_Stack.Data_Len));
        ; Setup parameters for call to function CRC_16
        MOV     R2,#Receive_Data & 0xff
        MOV     R3,#(Receive_Data >> 8) & 0xff
        LCALL   ??CRC_16?relay
        MOV     DPTR,#??Crc16Check
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  269           if(Crc16Check != Rx_Stack.CrcCheck)
        MOV     DPTR,#??Crc16Check
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#Rx_Stack + 212
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??DataHandling_485_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??DataHandling_485_5:
        JZ      ??DataHandling_485_6
//  270           {
//  271               Return_Value = 1;
??DataHandling_485_3:
        MOV     DPTR,#??Return_Value
        MOV     A,#0x1
        MOVX    @DPTR,A
//  272           }
//  273       }
//  274       else Return_Value = 1;
//  275       
//  276       memset(Receive_Data,0,Receive_REC_LEN);//Çå¿Õ½ÓÊÕÊý×é
??DataHandling_485_6:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#-0x38
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#Receive_Data & 0xff
        MOV     R3,#(Receive_Data >> 8) & 0xff
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  277       USART1_RX_STA = 0;
        MOV     DPTR,#USART1_RX_STA
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??DataHandling_485_7
//  278   }
//  279   else Return_Value = 1;
??DataHandling_485_1:
        MOV     A,#0x1
??DataHandling_485_7:
        MOVX    @DPTR,A
//  280 
//  281   return Return_Value;	//·µ»Ø½ÓÊÕÇé¿ö
        MOV     DPTR,#??Return_Value
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ??Subroutine9_0 & 0xFFFF
        CFI EndBlock cfiBlock16
//  282 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOV     A,R0
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??i_1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??Return_Value:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??Crc16Check:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  283 
//  284 //==========================================================
//  285 //	º¯ÊýÃû³Æ£º	calcByte()
//  286 //
//  287 //	º¯Êý¹¦ÄÜ£º	CRC_16×Ö½Ú¼ÆËãº¯Êý
//  288 //
//  289 //	Èë¿Ú²ÎÊý£º	crc:CRCÐ£ÑéÂë
//  290 //			b:
//  291 //              
//  292 //	·µ»Ø²ÎÊý£º	ÎÞ
//  293 //
//  294 //	ËµÃ÷£º		
//  295 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  296 uint16_t calcByte(uint16_t crc, uint8_t b)
calcByte:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function calcByte
        CODE
//  297 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  298     static uint16_t i = 0;	//Çå¿ÕÊý×éÊ±ForÑ­»·Ê¹ÓÃ	
//  299     crc = crc ^ (int)b << 8;
        MOV     A,R1
        XRL     A,R3
        MOV     R3,A
//  300     for (i = 0; i < 8; i++)
        MOV     DPTR,#??i_2
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  301     {
//  302         if ((crc & 0x8000) == 0x8000)
??calcByte_0:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        CLR     C
        RLC     A
        MOV     R4,A
        MOV     A,R5
        RLC     A
        MOV     R5,A
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??calcByte_1
//  303         {
//  304             crc = crc << 1 ^ 0x1021;
        MOV     A,R4
        XRL     A,#0x21
        MOV     R2,A
        MOV     A,R5
        XRL     A,#0x10
        SJMP    ??calcByte_2
//  305         }
//  306         else
//  307         {
//  308             crc = crc << 1;
??calcByte_1:
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
??calcByte_2:
        MOV     R3,A
//  309         }
//  310     }
        MOV     DPTR,#??i_2
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        MOVX    @DPTR,A
        MOV     DPTR,#??i_2
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x8
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??calcByte_0
//  311     return crc & 0xffff;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock23
//  312 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_1
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_2
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_5
        CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond32) CFA_SP SP+-5
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_6
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_7
        CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond34) CFA_SP SP+-5
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_8
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??i_2:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  313 
//  314 //==========================================================
//  315 //	º¯ÊýÃû³Æ£º	CRC_16()
//  316 //
//  317 //	º¯Êý¹¦ÄÜ£º	CRC_16¼ÆËãº¯Êý
//  318 //
//  319 //	Èë¿Ú²ÎÊý£º	*p:	ÐèÒªÐ£ÑéµÄÊý¾Ý
//  320 //			length: Ð£ÑéÊý¾Ý³¤¶È
//  321 //              
//  322 //	·µ»Ø²ÎÊý£º	wCRC16:16Î»CRCÐ£ÑéÂë
//  323 //
//  324 //	ËµÃ÷£º		
//  325 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 uint16_t CRC_16(void *p, int length)
CRC_16:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function CRC_16
        CODE
//  327 {
        FUNCALL CRC_16, calcByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  328     short wCRC16=0;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  329     uint8_t *pBuffer;
//  330     static uint16_t i = 0;  //Çå¿ÕÊý×éÊ±ForÑ­»·Ê¹ÓÃ	
//  331 
//  332     if (( p==0 )||( length==0 ))
        MOV     A,R6
        ORL     A,R7
        JZ      ??CRC_16_0
        MOV     A,R4
        ORL     A,?V0 + 1
        JNZ     ??CRC_16_1
//  333     {
//  334         return 0xFFFF;
??CRC_16_0:
        DEC     R2
        DEC     R3
        SJMP    ??CRC_16_2
//  335     }
//  336 
//  337     pBuffer=(uint8_t *)p;
//  338     for ( i = 0; i < length; i++)
??CRC_16_1:
        MOV     DPTR,#??i_3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??CrossCallReturnLabel_8
//  339     {
//  340         wCRC16 = calcByte(wCRC16, pBuffer[i]);
??CRC_16_3:
        ; Setup parameters for call to function calcByte
        MOV     DPTR,#??i_3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??calcByte?relay
//  341     }
        MOV     DPTR,#??i_3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    @DPTR,A
        MOV     DPTR,#??i_3
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 1
        JC      ??CRC_16_3
//  342 
//  343     return wCRC16;
??CRC_16_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock37
//  344 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??i_3:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  345 
//  346 //==========================================================
//  347 //	º¯ÊýÃû³Æ£º	Rs485_delay_ms()
//  348 //
//  349 //	º¯Êý¹¦ÄÜ£º	ºÁÃëÑÓÊ±º¯Êý
//  350 //
//  351 //	Èë¿Ú²ÎÊý£º	ÎÞ
//  352 //
//  353 //	·µ»Ø²ÎÊý£º	ÎÞ
//  354 //
//  355 //	ËµÃ÷£º		
//  356 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  357 void Rs485_delay_ms(unsigned int nms)
Rs485_delay_ms:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function Rs485_delay_ms
        CODE
//  358 {
        ; Saved register size: 0
        ; Auto size: 0
//  359     unsigned int i = 0,j = 0;
//  360     
//  361     for(i = 0;i<nms;i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Rs485_delay_ms_0
//  362     {
//  363         for(j = 0;j<9600;j++)
??Rs485_delay_ms_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Rs485_delay_ms_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Rs485_delay_ms_1
//  364         {;}
//  365     }
//  366 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock38

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_e1e2e3e4:
        DD 3789743076

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_eaebeced:
        DD 3941330157

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Rs485_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Rs485_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Tx_Stack_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Tx_Stack_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Rx_Stack_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Rx_Stack_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Rs485_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Rs485_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Rs485_Receive?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Rs485_Receive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DataHandling_485?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DataHandling_485

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??calcByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    calcByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CRC_16?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CRC_16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Rs485_delay_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Rs485_delay_ms

        END
// 
// 1 238 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//     8 bytes in segment XDATA_ROM_C
//   850 bytes in segment XDATA_Z
// 
// 1 292 bytes of CODE  memory
//     0 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 3 bytes shared)
//   850 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
