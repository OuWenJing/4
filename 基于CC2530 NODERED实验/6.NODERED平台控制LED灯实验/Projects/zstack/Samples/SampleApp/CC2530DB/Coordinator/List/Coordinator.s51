///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        01/May/2023  08:14:45 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\Source\Coor /
//                          dinator.c                                         /
//    Command line       =  -f D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-L /
//                          ED¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wCoord.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF11                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½ /
//                          Ì³Ì\CC2530\NODERED-LED¿ØÖÆ\Projects\zstack\Sample /
//                          s\SampleApp\Source\Coordinator.c -D ZIGBEEPRO -D  /
//                          ZTOOL_P1 -D MT_SYS_FUNC -D xMT_ZDO_FUNC -D        /
//                          LCD_SUPPORTED=DEBUG -D NV_RESTORE -lC             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinator\List\ -lA D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì /
//                          \CC2530\NODERED-LED¿ØÖÆ\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\Coordinator\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinator\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-L /
//                          ED¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\SOURCE\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC25 /
//                          30\NODERED-LED¿ØÖÆ\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I          /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MT\ -I                    /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I           /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I   /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I          /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\AF\ -I              /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\NWK\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SEC\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I            /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SYS\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I             /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\F8W\ -I              /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\ -I                  /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I           /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I        /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I   /
//                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL /
//                          E_CHIP\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\N /
//                          ODERED-LED¿ØÖÆ\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\HARDWARE\ -Ohz /
//    List file          =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ /
//                          ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\Co /
//                          ordinator\List\Coordinator.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??Send_LEDCtrl?relay
        FUNCTION ??Send_LEDCtrl?relay,0203H
        PUBLIC ??osalInitTasks?relay
        FUNCTION ??osalInitTasks?relay,0203H
        PUBLIC Boardcast_DstAddr
        PUBLIC Coordinator_SimpleDesc
        PUBLIC Coordinator_epDesc
        PUBLIC Flag_OnOff
        PUBLIC InClusterList
        PUBLIC LED_State
        PUBLIC OutClusterList
        PUBLIC Point_To_Point_DstAddr
        PUBLIC ReceiveIndicate
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SendTemperatureIndicate
        PUBLIC Send_LEDCtrl
        FUNCTION Send_LEDCtrl,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC Sensor_Humi
        PUBLIC Sensor_Temp
        PUBLIC osalInitTasks
        FUNCTION osalInitTasks,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC tasksArr
        PUBLIC tasksCnt
        PUBLIC tasksEvents
        PUBLIC tmpbuf
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_memset         SYMBOL "osal_memset"
macTaskInit         SYMBOL "macTaskInit"
nwk_init            SYMBOL "nwk_init"
Hal_Init            SYMBOL "Hal_Init"
APS_Init            SYMBOL "APS_Init"
APSF_Init           SYMBOL "APSF_Init"
ZDApp_Init          SYMBOL "ZDApp_Init"
ZDNwkMgr_Init       SYMBOL "ZDNwkMgr_Init"
WiFiGate_Init       SYMBOL "WiFiGate_Init"
UartInit            SYMBOL "UartInit"
afRegister          SYMBOL "afRegister"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_receive    SYMBOL "osal_msg_receive"
StartBind           SYMBOL "StartBind"
printf              SYMBOL "printf"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
KEY_Scan            SYMBOL "KEY_Scan"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??APSF_Init?relay   SYMBOL "?relay", APSF_Init
`?<Name APSF_ProcessEvent 22>` SYMBOL "APSF_ProcessEvent"
??APSF_ProcessEvent?relay SYMBOL "?relay", `?<Name APSF_ProcessEvent 22>`
??APS_Init?relay    SYMBOL "?relay", APS_Init
`?<Name APS_event_loop 25>` SYMBOL "APS_event_loop"
??APS_event_loop?relay SYMBOL "?relay", `?<Name APS_event_loop 25>`
??Hal_Init?relay    SYMBOL "?relay", Hal_Init
`?<Name Hal_ProcessEvent 28>` SYMBOL "Hal_ProcessEvent"
??Hal_ProcessEvent?relay SYMBOL "?relay", `?<Name Hal_ProcessEvent 28>`
??KEY_Scan?relay    SYMBOL "?relay", KEY_Scan
??StartBind?relay   SYMBOL "?relay", StartBind
??UartInit?relay    SYMBOL "?relay", UartInit
??WiFiGate_Init?relay SYMBOL "?relay", WiFiGate_Init
`?<Name WiFiGate_ProcessEven 34>` SYMBOL "WiFiGate_ProcessEvent"
??WiFiGate_ProcessEvent?relay SYMBOL "?relay", `?<Name WiFiGate_ProcessEven 34>`
??ZDApp_Init?relay  SYMBOL "?relay", ZDApp_Init
`?<Name ZDApp_event_loop 37>` SYMBOL "ZDApp_event_loop"
??ZDApp_event_loop?relay SYMBOL "?relay", `?<Name ZDApp_event_loop 37>`
??ZDNwkMgr_Init?relay SYMBOL "?relay", ZDNwkMgr_Init
`?<Name ZDNwkMgr_event_loop 40>` SYMBOL "ZDNwkMgr_event_loop"
??ZDNwkMgr_event_loop?relay SYMBOL "?relay", `?<Name ZDNwkMgr_event_loop 40>`
??afRegister?relay  SYMBOL "?relay", afRegister
`?<Name macEventLoop 43>` SYMBOL "macEventLoop"
??macEventLoop?relay SYMBOL "?relay", `?<Name macEventLoop 43>`
??macTaskInit?relay SYMBOL "?relay", macTaskInit
`?<Name nwk_event_loop 46>` SYMBOL "nwk_event_loop"
??nwk_event_loop?relay SYMBOL "?relay", `?<Name nwk_event_loop 46>`
??nwk_init?relay    SYMBOL "?relay", nwk_init
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??printf?relay      SYMBOL "?relay", printf
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
Send_LEDCtrl        SYMBOL "Send_LEDCtrl"
??Send_LEDCtrl?relay SYMBOL "?relay", Send_LEDCtrl
osalInitTasks       SYMBOL "osalInitTasks"
??osalInitTasks?relay SYMBOL "?relay", osalInitTasks

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTaskInit
        FUNCTION macTaskInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_init
        FUNCTION nwk_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_Init
        FUNCTION Hal_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APS_Init
        FUNCTION APS_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSF_Init
        FUNCTION APSF_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_Init
        FUNCTION ZDApp_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDNwkMgr_Init
        FUNCTION ZDNwkMgr_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN WiFiGate_Init
        FUNCTION WiFiGate_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UartInit
        FUNCTION UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN StartBind
        FUNCTION StartBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN KEY_Scan
        FUNCTION KEY_Scan,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??APSF_Init?relay
        FUNCTION ??APSF_Init?relay,00H
        EXTERN ??APSF_ProcessEvent?relay
        FUNCTION ??APSF_ProcessEvent?relay,00H
        EXTERN ??APS_Init?relay
        FUNCTION ??APS_Init?relay,00H
        EXTERN ??APS_event_loop?relay
        FUNCTION ??APS_event_loop?relay,00H
        EXTERN ??Hal_Init?relay
        FUNCTION ??Hal_Init?relay,00H
        EXTERN ??Hal_ProcessEvent?relay
        FUNCTION ??Hal_ProcessEvent?relay,00H
        EXTERN ??KEY_Scan?relay
        FUNCTION ??KEY_Scan?relay,00H
        EXTERN ??StartBind?relay
        FUNCTION ??StartBind?relay,00H
        EXTERN ??UartInit?relay
        FUNCTION ??UartInit?relay,00H
        EXTERN ??WiFiGate_Init?relay
        FUNCTION ??WiFiGate_Init?relay,00H
        EXTERN ??WiFiGate_ProcessEvent?relay
        FUNCTION ??WiFiGate_ProcessEvent?relay,00H
        EXTERN ??ZDApp_Init?relay
        FUNCTION ??ZDApp_Init?relay,00H
        EXTERN ??ZDApp_event_loop?relay
        FUNCTION ??ZDApp_event_loop?relay,00H
        EXTERN ??ZDNwkMgr_Init?relay
        FUNCTION ??ZDNwkMgr_Init?relay,00H
        EXTERN ??ZDNwkMgr_event_loop?relay
        FUNCTION ??ZDNwkMgr_event_loop?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??macEventLoop?relay
        FUNCTION ??macEventLoop?relay,00H
        EXTERN ??macTaskInit?relay
        FUNCTION ??macTaskInit?relay,00H
        EXTERN ??nwk_event_loop?relay
        FUNCTION ??nwk_event_loop?relay,00H
        EXTERN ??nwk_init?relay
        FUNCTION ??nwk_init?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H

// D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ØÖÆ\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
//    1 #include "WiFiGate.h"
//    2 #include "ZComDef.h"
//    3 #include "hal_drivers.h"
//    4 #include "OSAL.h"
//    5 #include "OSAL_Tasks.h"
//    6 #include "nwk.h"
//    7 #include "APS.h"
//    8 #include "ZDApp.h"
//    9 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
//   10   #include "ZDNwkMgr.h"
//   11 #endif
//   12 #if defined ( ZIGBEE_FRAGMENTATION )
//   13   #include "aps_frag.h"
//   14 #endif
//   15 
//   16 #include "SampleApp.h"
//   17 //#include "WiFiGate.h"
//   18 #include "OSAL.h"
//   19 #include "ZGlobals.h"
//   20 #include "AF.h"
//   21 #include "aps_groups.h"
//   22 #include "ZDApp.h"
//   23 
//   24 #include "SampleApp.h"
//   25 #include "SampleAppHw.h"
//   26 
//   27 #include "OnBoard.h"
//   28 
//   29 /* HAL */
//   30 #include "hal_lcd.h"
//   31 #include "hal_led.h"
//   32 #include "hal_key.h"
//   33 #include "string.h"
//   34 
//   35 #include "MT_UART.h"
//   36 #include "MT_APP.h"
//   37 #include "MT.h"
//   38 
//   39 /*********************************************************************
//   40  * GLOBAL VARIABLES
//   41  */
//   42 
//   43 // The order in this table must be identical to the task initialization calls below in osalInitTask.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   44 const pTaskEventHandlerFn tasksArr[] = {
tasksArr:
        DATA16
        DW ??macEventLoop?relay
        DW ??nwk_event_loop?relay
        DW ??Hal_ProcessEvent?relay
        DW ??APS_event_loop?relay
        DW ??APSF_ProcessEvent?relay
        DW ??ZDApp_event_loop?relay
        DW ??ZDNwkMgr_event_loop?relay
        DW ??WiFiGate_ProcessEvent?relay
        DW ??SampleApp_ProcessEvent?relay
//   45   macEventLoop,
//   46   nwk_event_loop,
//   47   Hal_ProcessEvent,
//   48 #if defined( MT_TASK )
//   49   MT_ProcessEvent,
//   50 #endif
//   51   APS_event_loop,
//   52 #if defined ( ZIGBEE_FRAGMENTATION )
//   53   APSF_ProcessEvent,
//   54 #endif
//   55   ZDApp_event_loop,
//   56 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
//   57   ZDNwkMgr_event_loop,
//   58 #endif
//   59   WiFiGate_ProcessEvent,
//   60   SampleApp_ProcessEvent,
//   61   
//   62 };
//   63 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   64 const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
tasksCnt:
        DB 9

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   65 uint16 *tasksEvents;
tasksEvents:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   66 /*********************************************************************
//   67  * FUNCTIONS
//   68  *********************************************************************/
//   69 
//   70 /*********************************************************************
//   71  * @fn      osalInitTasks
//   72  *
//   73  * @brief   This function invokes the initialization function for each task.
//   74  *
//   75  * @param   void
//   76  *
//   77  * @return  none
//   78  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   79 void osalInitTasks( void )
osalInitTasks:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function osalInitTasks
        CODE
//   80 {
        FUNCALL osalInitTasks, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, macTaskInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, nwk_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, Hal_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, APS_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, APSF_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, ZDApp_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, ZDNwkMgr_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, WiFiGate_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, SampleApp_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   81   uint8 taskID = 0;
//   82 
//   83   tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x12
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#tasksEvents
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   84   osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
//   85 
//   86   macTaskInit( taskID++ );
        ; Setup parameters for call to function macTaskInit
        MOV     R1,#0x0
        LCALL   ??macTaskInit?relay
//   87   nwk_init( taskID++ );
        ; Setup parameters for call to function nwk_init
        MOV     R1,#0x1
        LCALL   ??nwk_init?relay
//   88   Hal_Init( taskID++ );
        ; Setup parameters for call to function Hal_Init
        MOV     R1,#0x2
        LCALL   ??Hal_Init?relay
//   89 #if defined( MT_TASK )
//   90   MT_TaskInit( taskID++ );
//   91 #endif
//   92   APS_Init( taskID++ );
        ; Setup parameters for call to function APS_Init
        MOV     R1,#0x3
        LCALL   ??APS_Init?relay
//   93 #if defined ( ZIGBEE_FRAGMENTATION )
//   94   APSF_Init( taskID++ );
        ; Setup parameters for call to function APSF_Init
        MOV     R1,#0x4
        LCALL   ??APSF_Init?relay
//   95 #endif
//   96   ZDApp_Init( taskID++ );
        ; Setup parameters for call to function ZDApp_Init
        MOV     R1,#0x5
        LCALL   ??ZDApp_Init?relay
//   97 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
//   98   ZDNwkMgr_Init( taskID++ );
        ; Setup parameters for call to function ZDNwkMgr_Init
        MOV     R1,#0x6
        LCALL   ??ZDNwkMgr_Init?relay
//   99 #endif
//  100   WiFiGate_Init( taskID++);
        ; Setup parameters for call to function WiFiGate_Init
        MOV     R1,#0x7
        LCALL   ??WiFiGate_Init?relay
//  101   SampleApp_Init( taskID++ );
        ; Setup parameters for call to function SampleApp_Init
        MOV     R1,#0x8
        LCALL   ??SampleApp_Init?relay
//  102   
//  103 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  104 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  105 const cId_t InClusterList[1] =
InClusterList:
        DW 0
//  106 {
//  107   0
//  108 };

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  109 const cId_t OutClusterList[1] =
OutClusterList:
        DW 16
//  110 {
//  111   LED_CONTROL_CLUSTERID
//  112 };
//  113 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  114 const SimpleDescriptionFormat_t Coordinator_SimpleDesc =
Coordinator_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 0
        DATA16
        DW InClusterList
        DATA8
        DB 1
        DATA16
        DW OutClusterList
//  115 {
//  116   SAMPLEAPP_ENDPOINT,                 //  int Endpoint;
//  117   SAMPLEAPP_PROFID,                   //  uint16 AppProfId[2];
//  118   SAMPLEAPP_DEVICEID,                 //  uint16 AppDeviceId[2];
//  119   SAMPLEAPP_DEVICE_VERSION,           //  int   AppDevVer:4;
//  120   SAMPLEAPP_FLAGS,                    //  int   AppFlags:4;
//  121   0,                                  //  uint8  AppNumInClusters;
//  122   (cId_t *)InClusterList,             //  uint8 *pAppInClusterList;
//  123   1,                                  //  uint8  AppNumOutClusters;
//  124   (cId_t *)OutClusterList             //  uint8 *pAppOutClusterList;
//  125 };
//  126 // This is the Endpoint/Interface description.  It is defined here, but
//  127 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  128 // in the structure here and make it a "const" (in code space).  The
//  129 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 endPointDesc_t Coordinator_epDesc;
Coordinator_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  131 /*********************************************************************
//  132  * EXTERNAL VARIABLES
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * EXTERNAL FUNCTIONS
//  137  */
//  138 
//  139 /*********************************************************************
//  140  * LOCAL VARIABLES
//  141  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  143                           // This variable will be received when
//  144                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  146 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  148 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149 afAddrType_t Point_To_Point_DstAddr;//µã¶ÔµãÍ¨ÐÅ¶¨Òå
Point_To_Point_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  150 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 afAddrType_t Boardcast_DstAddr;//¹ã²¥Í¨ÐÅ¶¨Òå
Boardcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  152 /*********************************************************************
//  153  * LOCAL FUNCTIONS
//  154  */
//  155 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  156 void Send_LEDCtrl(uint8 idx,uint8 ctrl);
//  157 /*********************************************************************
//  158  * @fn      SampleApp_Init
//  159  *
//  160  * @brief   Initialization function for the Generic App Task.
//  161  *          This is called during initialization and should contain
//  162  *          any application specific initialization (ie. hardware
//  163  *          initialization/setup, table initialization, power up
//  164  *          notificaiton ... ).
//  165  *
//  166  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  167  *                    used to send messages and set timers.
//  168  *
//  169  * @return  none
//  170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  172 {
        FUNCALL SampleApp_Init, UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  173   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  174   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  175   SampleApp_TransID = 0;  
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  176 
//  177   //LED_Init(); //³õÊ¼»¯°´¼üÄ£¿éLED¿ØÖÆ¹Ü½Å£¬°´¼ü¿ØÖÆ¹Ü½Å  
//  178   UartInit(HAL_UART_PORT_1,HAL_UART_BR_115200);//³õÊ¼»¯´®¿ÚÓÃÓÚµ÷ÊÔ
        ; Setup parameters for call to function UartInit
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??UartInit?relay
//  179 
//  180   Point_To_Point_DstAddr.addrMode       = (afAddrMode_t)Addr16Bit; //µã²¥
        MOV     DPTR,#Point_To_Point_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  181   Point_To_Point_DstAddr.endPoint       = SAMPLEAPP_ENDPOINT;      
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  182   Point_To_Point_DstAddr.addr.shortAddr = 0; 
        MOV     DPTR,#Point_To_Point_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  183 
//  184   //¹ã²¥Í¨ÐÅ¶¨Òå 
//  185   Boardcast_DstAddr.addrMode       = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#Boardcast_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  186   Boardcast_DstAddr.endPoint       = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  187   Boardcast_DstAddr.addr.shortAddr = 0Xffff;
        MOV     DPTR,#Boardcast_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  188 	
//  189   // ÌîÐ´¶Ëµã
//  190   Coordinator_epDesc.endPoint   = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#Coordinator_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  191   Coordinator_epDesc.task_id    = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  192   Coordinator_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&Coordinator_SimpleDesc;
        INC     DPTR
        MOV     A,#Coordinator_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Coordinator_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  193   Coordinator_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  194   // ×¢²á¶Ëµã
//  195   afRegister( &Coordinator_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Coordinator_epDesc & 0xff
        MOV     R3,#(Coordinator_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  196   osal_start_timerEx( SampleApp_TaskID, READ_KEY_MSG_EVT,3000); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        LCALL   ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock1
//  197 }
??CrossCallReturnLabel_2:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,#0x10
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_1
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
//  198 
//  199 /*********************************************************************
//  200  * @fn      SampleApp_ProcessEvent
//  201  *
//  202  * @brief   Generic Application Task event processor.  This function
//  203  *          is called to process all events for the task.  Events
//  204  *          include timers, messages and any other user defined events.
//  205  *
//  206  * @param   task_id  - The OSAL assigned task ID.
//  207  * @param   events - events to process.  This is a bit map and can
//  208  *                   contain more than one event.
//  209  *
//  210  * @return  none
//  211  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  212 uint8 SendTemperatureIndicate = 1;
SendTemperatureIndicate:
        DATA8
        DS 1
        REQUIRE `?<Initializer for SendTemperatureIndicate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  213 uint8 tmpbuf[64];
tmpbuf:
        DS 64
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  214 uint8 ReceiveIndicate = 0;
ReceiveIndicate:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  215 uint8 Sensor_Temp,Sensor_Humi,Flag_OnOff = 0;
Sensor_Temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
Sensor_Humi:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
Flag_OnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  216 uint8 LED_State=0;
LED_State:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  217 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  218 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, StartBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, StartBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, KEY_Scan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Send_LEDCtrl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  219   afIncomingMSGPacket_t *MSGpkt;
//  220   (void)task_id;  // Intentionally unreferenced parameter
//  221 
//  222   if ( events & SYS_EVENT_MSG )
        MOV     ?V0 + 2,#OutClusterList & 0xff
        MOV     ?V0 + 3,#(OutClusterList >> 8) & 0xff
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  223   {
//  224     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  225     while ( MSGpkt )
//  226     {
//  227       switch ( MSGpkt->hdr.event )
//  228       {        
//  229         // Received when a messages is received (OTA) for this endpoint
//  230         case AF_INCOMING_MSG_CMD:
//  231           SampleApp_MessageMSGCB( MSGpkt );
//  232           break;
//  233 
//  234         // Received whenever the device changes state in the network
//  235         case ZDO_STATE_CHANGE:
//  236           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  237           if(SampleApp_NwkState == DEV_ZB_COORD)
        XRL     A,#0x9
        JNZ     ??SampleApp_ProcessEvent_3
//  238           {
//  239 						StartBind(1,(const cId_t*)Coordinator_SimpleDesc.pAppOutClusterList);
        ; Setup parameters for call to function StartBind
        LCALL   ?Subroutine1 & 0xFFFF
//  240 						osal_start_timerEx( SampleApp_TaskID, BIND_TIME_MSG_EVT,2000);
//  241             printf("coord ready!");
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "coord ready!">` & 0xff
        MOV     R3,#(`?<Constant "coord ready!">` >> 8) & 0xff
        LCALL   ??printf?relay
//  242           }
//  243           break;
//  244 
//  245         default:
//  246           break;
//  247       }
//  248 
//  249       // Release the memory
//  250       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  251 
//  252       // Next - if one is available
//  253       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_4
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_3
//  254     }
//  255 
//  256     // return unprocessed events
//  257     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_6
//  258   }//if ( events & SYS_EVENT_MSG )
//  259   
//  260   if(events & BIND_TIME_MSG_EVT){//°ó¶¨³¬Ê±
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??CrossCallReturnLabel_1
//  261 		printf("bind timeout\r\n");
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "bind timeout\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "bind timeout\\r\\n">` >> 8) & 0xff
        LCALL   ??printf?relay
//  262 		StartBind(1,(const cId_t*)Coordinator_SimpleDesc.pAppOutClusterList);
        ; Setup parameters for call to function StartBind
        LCALL   ?Subroutine1 & 0xFFFF
//  263 		osal_start_timerEx( SampleApp_TaskID, BIND_TIME_MSG_EVT,2000);        
//  264   } 
//  265   if(events & READ_KEY_MSG_EVT){//ÊÇREAD_KEY_MSG_EVTÊÂ¼þ 
??CrossCallReturnLabel_1:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??CrossCallReturnLabel_3
//  266 		if(KEY_Scan()&S1_PRES){//¼ì²â°´¼ü
        ; Setup parameters for call to function KEY_Scan
        LCALL   ??KEY_Scan?relay
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_7
//  267 			printf("S1_PRES\r\n");
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "S1_PRES\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "S1_PRES\\r\\n">` >> 8) & 0xff
        LCALL   ??printf?relay
//  268 				LED_State = 1 - LED_State;
        MOV     DPTR,#LED_State
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        CLR     C
        SUBB    A,R0
        MOVX    @DPTR,A
//  269 				Send_LEDCtrl(1,LED_State);//·¢ËÍ¿ØÖÆÃüÁî
        ; Setup parameters for call to function Send_LEDCtrl
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??Send_LEDCtrl?relay
//  270 		}
//  271 		/*100ms ºó´¥·¢READ_KEY_MSG_EVT*/
//  272 		osal_start_timerEx( SampleApp_TaskID, READ_KEY_MSG_EVT,100); 	
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        LCALL   ?Subroutine2 & 0xFFFF
//  273   }
//  274   // Discard unknown events
//  275   return 0;
??CrossCallReturnLabel_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_6:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//  276 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,#0x1
        LCALL   ??StartBind?relay
        ; Setup parameters for call to function osal_start_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x8
        LCALL   ??Subroutine3_0 & 0xFFFF
??CrossCallReturnLabel_4:
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  277 void Send_LEDCtrl(uint8 idx,uint8 ctrl)
Send_LEDCtrl:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function Send_LEDCtrl
        CODE
//  278 {
        FUNCALL Send_LEDCtrl, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
//  279   uint8 tmpbuf[2];
//  280   tmpbuf[0] = idx;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  281   tmpbuf[1] = ctrl;  
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  282 	if(!Point_To_Point_DstAddr.addr.shortAddr){//Èç¹ûÄ¿±êµØÖ·²»Îª0£¬²ÅÄÜ·¢ËÍÊý¾Ý
        MOV     DPTR,#Point_To_Point_DstAddr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??Send_LEDCtrl_0
//  283 			return;
//  284 	}
//  285   if ( AF_DataRequest( &Point_To_Point_DstAddr,&Coordinator_epDesc,
//  286                        LED_CONTROL_CLUSTERID,
//  287                        2,
//  288                        &tmpbuf[0],
//  289                        &SampleApp_TransID,
//  290                        AF_DISCV_ROUTE,
//  291                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,#Coordinator_epDesc & 0xff
        MOV     R5,#(Coordinator_epDesc >> 8) & 0xff
        MOV     R2,#Point_To_Point_DstAddr & 0xff
        MOV     R3,#(Point_To_Point_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  292   {
//  293     //printf("tx success\r\n");//´®¿Ú´òÓ¡ÌáÊ¾£¬·¢ËÍ³É¹¦
//  294   }
//  295 }
??Send_LEDCtrl_0:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  296 /*********************************************************************
//  297  * @fn      SampleApp_MessageMSGCB
//  298  *
//  299  * @brief   Data message processor callback.  This function processes
//  300  *          any incoming data - probably from other devices.  So, based
//  301  *          on cluster ID, perform the intended action.
//  302  *
//  303  * @param   none
//  304  *
//  305  * @return  none
//  306 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  307 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  308 { 
        FUNCALL SampleApp_MessageMSGCB, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  309   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x41
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JNZ     ??SampleApp_MessageMSGCB_1
//  310   {
//  311   	case BIND_RSP_CMD_ID:
//  312          osal_stop_timerEx(SampleApp_TaskID,BIND_TIME_MSG_EVT); 
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  313          printf("source shortAddr=0x%x",pkt->srcAddr.addr.shortAddr);
        MOV     A,R6
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function printf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R2,#`?<Constant "source shortAddr=0x%x">` & 0xff
        MOV     R3,#(`?<Constant "source shortAddr=0x%x">` >> 8) & 0xff
        LCALL   ??printf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
//  314          Point_To_Point_DstAddr.addr.shortAddr = pkt->srcAddr.addr.shortAddr; 
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#Point_To_Point_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  315 				 break;
//  316   }
//  317 }
??SampleApp_MessageMSGCB_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock16

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SendTemperatureIndicate>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalInitTasks?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalInitTasks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Send_LEDCtrl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Send_LEDCtrl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "coord ready!">`:
        DB "coord ready!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "bind timeout\\r\\n">`:
        DB "bind timeout\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "S1_PRES\\r\\n">`:
        DB "S1_PRES\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "source shortAddr=0x%x">`:
        DB "source shortAddr=0x%x"

        END
//  318 
//  319 
//  320 /*********************************************************************
//  321 *********************************************************************/
// 
// 594 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
//  95 bytes in segment XDATA_ROM_C
// 104 bytes in segment XDATA_Z
// 
// 625 bytes of CODE  memory
//  95 bytes of CONST memory
// 105 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
