###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         01/May/2023  09:24:48 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Components\HARDWARE\Rs485.c                     #
#    Command line       =  -f D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LE #
#                          D¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF11                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Components\HARDWARE\Rs485.c -D NWK_AUTO_POLL    #
#                          -D ZTOOL_P1 -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       #
#                          LCD_SUPPORTED=DEBUG -lC D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½ #
#                          Ì³Ì\CC2530\NODERED-LED¿ØÖÆ\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\EndDevice\List\ -lA            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          evice\List\ --diag_suppress Pe001,Pa010 -o         #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          evice\Obj\ -e --no_unroll --no_inline --no_tbaa    #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LE #
#                          D¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\  #
#                          -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LE #
#                          D¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\SOURCE\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\ #
#                          NODERED-LED¿ØÖÆ\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I               #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\ -I                       #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\HAL\INCLUDE\ -I              #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I      #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I             #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\AF\ -I                 #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\NWK\ -I                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\SEC\ -I                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\SAPI\ -I               #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\SYS\ -I                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\ZDO\ -I                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\ZMAC\F8W\ -I                 #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\ZMAC\ -I                     #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\SERVICES\SADDR\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\SERVICES\SDATA\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MAC\INCLUDE\ -I              #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I      #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_C #
#                          HIP\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODER #
#                          ED-LED¿ØÖÆ\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\HARDWARE\ -Om        #
#    List file          =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          evice\List\Rs485.lst                               #
#    Object file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿Ø #
#                          ÖÆ\Projects\zstack\Samples\SampleApp\CC2530DB\EndD #
#                          evice\Obj\Rs485.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ØÖÆ\Components\HARDWARE\Rs485.c
      1          #include "stdlib.h"
      2          #include "string.h"
      3          #include "stdio.h"
      4          #include "Rs485.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

  #ifndef __DELAY_H
                  ^
"D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-LED¿ØÖÆ\Components\HARDWARE\delay.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
      5          #include "usart.h"
      6          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      7          unsigned char  Send_Data[Send_REC_LEN];         //·¢ËÍ»º³å,×î´óSend_REC_LEN¸ö×Ö½Ú
   \                     Send_Data:
   \   000000                DS 200
   \   0000C8                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          unsigned char  Receive_Data[Receive_REC_LEN];   //½ÓÊÕ»º³å,×î´óSend_REC_LEN¸ö×Ö½Ú
   \                     Receive_Data:
   \   000000                DS 200
   \   0000C8                REQUIRE __INIT_XDATA_Z
      9          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     10          Send_Stack Tx_Stack;				//485·¢ËÍÊý¾Ý½á¹¹Ìå
   \                     Tx_Stack:
   \   000000                DS 218
   \   0000DA                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     11          Receive_Stack Rx_Stack;				//485½ÓÊÕÊý¾Ý½á¹¹Ìå
   \                     Rx_Stack:
   \   000000                DS 218
   \   0000DA                REQUIRE __INIT_XDATA_Z
     12          
     13          //==========================================================
     14          //	º¯ÊýÃû³Æ£º	Rs485_Init()
     15          //
     16          //	º¯Êý¹¦ÄÜ£º	³õÊ¼»¯485
     17          //
     18          //	Èë¿Ú²ÎÊý£º	ÎÞ
     19          //
     20          //	·µ»Ø²ÎÊý£º	ÎÞ
     21          //
     22          //	ËµÃ÷£º		
     23          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     24          void Rs485_Init(void)
   \                     Rs485_Init:
     25          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     26              P1SEL &= ~0x80;     //ÉèÖÃP1.3ÎªÆÕÍ¨IO¿Ú  
   \   000004   53F47F       ANL     0xf4,#0x7f
     27              P1DIR |= 0x08;      // P1.3¶¨ÒåÎªÊä³ö
   \   000007   43FE08       ORL     0xfe,#0x8
     28              RS485_RX_EN();      //³õÊ¼»¯Îª½ÓÊÕÄ£Ê½
   \   00000A   C293         CLR     0x90.3
     29          
     30              Rx_Stack_Init();	//³õÊ¼»¯½ÓÊÕ½á¹¹Ìå
   \   00000C                ; Setup parameters for call to function Rx_Stack_Init
   \   00000C   12....       LCALL   ??Rx_Stack_Init?relay
     31              Tx_Stack_Init();	//³õÊ¼»¯·¢ËÍ½á¹¹Ìå
   \   00000F                ; Setup parameters for call to function Tx_Stack_Init
   \   00000F   12....       LCALL   ??Tx_Stack_Init?relay
     32          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE P1SEL
   \   000019                REQUIRE P1DIR
   \   000019                REQUIRE _A_P1
     33          
     34          //==========================================================
     35          //	º¯ÊýÃû³Æ£º	Tx_Stack_Init
     36          //
     37          //	º¯Êý¹¦ÄÜ£º	RFIDÄ£¿éÉÏ·¢Êý¾Ý½á¹¹Ìå³õÊ¼»¯
     38          //
     39          //	Èë¿Ú²ÎÊý£º	ÎÞ
     40          //              
     41          //	·µ»Ø²ÎÊý£º	ÎÞ
     42          //
     43          //	ËµÃ÷£º		
     44          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     45          void Tx_Stack_Init(void)
   \                     Tx_Stack_Init:
     46          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     47            Tx_Stack.Head = 0xE1E2E3E4;			//Ö¡Í·
   \   000005   90....       MOV     DPTR,#__Constant_e1e2e3e4
   \   000008   12....       LCALL   ?XLOAD_R2345
   \   00000B   90....       MOV     DPTR,#Tx_Stack
   \   00000E   12....       LCALL   ?XSTORE_R2345
     48            Tx_Stack.Pack_Num = 0x00;			//°üÐòºÅ
   \   000011   90....       MOV     DPTR,#Tx_Stack + 4
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
     49            Tx_Stack.Src_Adr = 0x0000;			//Ô´µØÖ·
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
     50            Tx_Stack.Dst_Adr = 0x0000;			//Ä¿µÄµØÖ·
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
     51            Tx_Stack.State = 0x0000;			//×´Ì¬Âë
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
     52            Tx_Stack.Data_Len = 0x00;			//Êý¾Ý³¤¶È
   \   000022   A3           INC     DPTR
   \   000023   F0           MOVX    @DPTR,A
     53            memset(Tx_Stack.Data, 0, sizeof(Tx_Stack.Data));//Êý¾ÝÊý×éÈ«²¿Çå¿Õ
   \   000024                ; Setup parameters for call to function memset
   \   000024   75..C8       MOV     ?V0 + 0,#-0x38
   \   000027   F5..         MOV     ?V0 + 1,A
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A..         MOV     R2,#(Tx_Stack + 12) & 0xff
   \   000034   7B..         MOV     R3,#((Tx_Stack + 12) >> 8) & 0xff
   \   000036   12....       LCALL   ??memset?relay
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
     54            Tx_Stack.CrcCheck = 0x0000;		        //CRCÐ£ÑéÂë
   \   00003E   90....       MOV     DPTR,#Tx_Stack + 212
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   F0           MOVX    @DPTR,A
     55            Tx_Stack.Tail = 0xEAEBECED;			//Ö¡Î²
   \   000045   90....       MOV     DPTR,#__Constant_eaebeced
   \   000048   12....       LCALL   ?XLOAD_R2345
   \   00004B   90....       MOV     DPTR,#Tx_Stack + 214
   \   00004E   12....       LCALL   ?XSTORE_R2345
     56          }
   \   000051   7F02         MOV     R7,#0x2
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
     57          
     58          //==========================================================
     59          //	º¯ÊýÃû³Æ£º	Rx_Stack_Init
     60          //
     61          //	º¯Êý¹¦ÄÜ£º	ÉÏÎ»»úÏÂ·¢Êý¾Ý½á¹¹Ìå³õÊ¼»¯
     62          //
     63          //	Èë¿Ú²ÎÊý£º	ÎÞ
     64          //              
     65          //	·µ»Ø²ÎÊý£º	ÎÞ
     66          //
     67          //	ËµÃ÷£º		
     68          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     69          void Rx_Stack_Init(void)
   \                     Rx_Stack_Init:
     70          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     71            Rx_Stack.Head = 0xE1E2E3E4;		        //Ö¡Í·
   \   000005   90....       MOV     DPTR,#__Constant_e1e2e3e4
   \   000008   12....       LCALL   ?XLOAD_R2345
   \   00000B   90....       MOV     DPTR,#Rx_Stack
   \   00000E   12....       LCALL   ?XSTORE_R2345
     72            Rx_Stack.Pack_Num = 0x00;		        //°üÐòºÅ
   \   000011   90....       MOV     DPTR,#Rx_Stack + 4
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
     73            Rx_Stack.Src_Adr = 0x0000;			//Ô´µØÖ·
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
     74            Rx_Stack.Dst_Adr = 0x0000;			//Ä¿µÄµØÖ·
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
     75            Rx_Stack.Command = 0x0000;			//ÃüÁîÂë
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
     76            Rx_Stack.Data_Len = 0x00;			//Êý¾Ý³¤¶È						
   \   000022   A3           INC     DPTR
   \   000023   F0           MOVX    @DPTR,A
     77            memset(Rx_Stack.Data, 0, sizeof(Rx_Stack.Data));//Êý¾ÝÊý×éÈ«²¿Çå¿Õ
   \   000024                ; Setup parameters for call to function memset
   \   000024   75..C8       MOV     ?V0 + 0,#-0x38
   \   000027   F5..         MOV     ?V0 + 1,A
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A..         MOV     R2,#(Rx_Stack + 12) & 0xff
   \   000034   7B..         MOV     R3,#((Rx_Stack + 12) >> 8) & 0xff
   \   000036   12....       LCALL   ??memset?relay
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
     78            Rx_Stack.CrcCheck = 0x0000;			//CRCÐ£ÑéÂë
   \   00003E   90....       MOV     DPTR,#Rx_Stack + 212
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   F0           MOVX    @DPTR,A
     79            Rx_Stack.Tail = 0xEAEBECED;			//Ö¡Î²
   \   000045   90....       MOV     DPTR,#__Constant_eaebeced
   \   000048   12....       LCALL   ?XLOAD_R2345
   \   00004B   90....       MOV     DPTR,#Rx_Stack + 214
   \   00004E   12....       LCALL   ?XSTORE_R2345
     80          }
   \   000051   7F02         MOV     R7,#0x2
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
     81          
     82          //==========================================================
     83          //	º¯ÊýÃû³Æ£º	Rs485_Send()
     84          //
     85          //	º¯Êý¹¦ÄÜ£º	·¢ËÍÊý¾Ýµ½485×ÜÏßÉÏ
     86          //
     87          //	Èë¿Ú²ÎÊý£º	SrcAdr:Ô´µØÖ·
     88          //			DstAdr:Ä¿µÄµØÖ·
     89          //			Cmd		:ÃüÁîÂë
     90          //			Len		:Êý¾Ý³¤¶È
     91          //			*pData:Êý¾Ý
     92          //
     93          //	·µ»Ø²ÎÊý£º	ÎÞ
     94          //
     95          //	ËµÃ÷£º		
     96          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          void Rs485_Send(uint16_t SrcAdr,uint16_t DstAdr,uint16_t Cmd,uint8_t Len,uint8_t *pData)
   \                     Rs485_Send:
     98          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   7410         MOV     A,#0x10
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
     99            static uint16_t i = 0;	            //Çå¿ÕÊý×éÊ±ForÑ­»·Ê¹ÓÃ	
    100            
    101            for(i=0;i<4;i++)
   \   00001D   90....       MOV     DPTR,#??i
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   8023         SJMP    ??Rs485_Send_0
    102            {
    103               Send_Data[i] = (0xE1+i);		    //Ö¡Í·
   \                     ??Rs485_Send_1:
   \   000025   90....       MOV     DPTR,#??i
   \   000028   E0           MOVX    A,@DPTR
   \   000029   24E1         ADD     A,#-0x1f
   \   00002B   C0E0         PUSH    A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   24..         ADD     A,#Send_Data & 0xff
   \   000030   FE           MOV     R6,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   34..         ADDC    A,#(Send_Data >> 8) & 0xff
   \   000035   FF           MOV     R7,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
    104            }
   \   00003D   90....       MOV     DPTR,#??i
   \   000040   E0           MOVX    A,@DPTR
   \   000041   2401         ADD     A,#0x1
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   3400         ADDC    A,#0x0
   \                     ??Rs485_Send_0:
   \   000048   F0           MOVX    @DPTR,A
   \   000049   90....       MOV     DPTR,#??i
   \   00004C   C3           CLR     C
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   9404         SUBB    A,#0x4
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   9400         SUBB    A,#0x0
   \   000054   40CF         JC      ??Rs485_Send_1
    105          
    106            if(Tx_Stack.Pack_Num>=255)
   \   000056   90....       MOV     DPTR,#Tx_Stack + 4
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F4           CPL     A
   \   00005B   7002         JNZ     ??Rs485_Send_2
    107            {
    108               Tx_Stack.Pack_Num = 0;	
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    109            }
    110            Send_Data[4] = Tx_Stack.Pack_Num;	    //°üÐòºÅ	
   \                     ??Rs485_Send_2:
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   90....       MOV     DPTR,#Send_Data + 4
   \   000063   F0           MOVX    @DPTR,A
    111            Tx_Stack.Pack_Num++;
   \   000064   90....       MOV     DPTR,#Tx_Stack + 4
   \   000067   E0           MOVX    A,@DPTR
   \   000068   04           INC     A
   \   000069   F0           MOVX    @DPTR,A
    112            Send_Data[5] = SrcAdr>>8;
   \   00006A   EB           MOV     A,R3
   \   00006B   90....       MOV     DPTR,#Send_Data + 5
   \   00006E   F0           MOVX    @DPTR,A
    113            Send_Data[6] = SrcAdr;		    //Ô´µØÖ·
   \   00006F   EA           MOV     A,R2
   \   000070   A3           INC     DPTR
   \   000071   F0           MOVX    @DPTR,A
    114            Send_Data[7] = DstAdr>>8;
   \   000072   ED           MOV     A,R5
   \   000073   A3           INC     DPTR
   \   000074   F0           MOVX    @DPTR,A
    115            Send_Data[8] = DstAdr;		    //Ä¿µÄµØÖ·
   \   000075   EC           MOV     A,R4
   \   000076   A3           INC     DPTR
   \   000077   F0           MOVX    @DPTR,A
    116            Send_Data[9] = Cmd>>8;
   \   000078   E5..         MOV     A,?V0 + 1
   \   00007A   A3           INC     DPTR
   \   00007B   F0           MOVX    @DPTR,A
    117            Send_Data[10] = Cmd;			    //ÃüÁîÂë
   \   00007C   E5..         MOV     A,?V0 + 0
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
    118            Send_Data[11] = Len;			    //Êý¾Ý³¤¶È
   \   000080   E5..         MOV     A,?V0 + 2
   \   000082   A3           INC     DPTR
   \   000083   F0           MOVX    @DPTR,A
    119            for(i=12;i<(Len+12);i++)
   \   000084   90....       MOV     DPTR,#??i
   \   000087   740C         MOV     A,#0xc
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E4           CLR     A
   \   00008C   8039         SJMP    ??Rs485_Send_3
    120            {
    121                Send_Data[i] = pData[i-12];	    //Êý¾Ý
   \                     ??Rs485_Send_4:
   \   00008E   90....       MOV     DPTR,#??i
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FA           MOV     R2,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FB           MOV     R3,A
   \   000096   E8           MOV     A,R0
   \   000097   2A           ADD     A,R2
   \   000098   FA           MOV     R2,A
   \   000099   E9           MOV     A,R1
   \   00009A   3B           ADDC    A,R3
   \   00009B   FB           MOV     R3,A
   \   00009C   EA           MOV     A,R2
   \   00009D   24F4         ADD     A,#-0xc
   \   00009F   F582         MOV     DPL,A
   \   0000A1   EB           MOV     A,R3
   \   0000A2   34FF         ADDC    A,#-0x1
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   C0E0         PUSH    A
   \   0000A9   90....       MOV     DPTR,#??i
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   24..         ADD     A,#Send_Data & 0xff
   \   0000AF   FA           MOV     R2,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   34..         ADDC    A,#(Send_Data >> 8) & 0xff
   \   0000B4   FB           MOV     R3,A
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   8B83         MOV     DPH,R3
   \   0000B9   D0E0         POP     A
   \   0000BB   F0           MOVX    @DPTR,A
    122            }
   \   0000BC   90....       MOV     DPTR,#??i
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   2401         ADD     A,#0x1
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   3400         ADDC    A,#0x0
   \                     ??Rs485_Send_3:
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   85..82       MOV     DPL,?V0 + 2
   \   0000CB   8582..       MOV     ?V0 + 0,DPL
   \   0000CE   E5..         MOV     A,?V0 + 0
   \   0000D0   240C         ADD     A,#0xc
   \   0000D2   FC           MOV     R4,A
   \   0000D3   E4           CLR     A
   \   0000D4   3400         ADDC    A,#0x0
   \   0000D6   FD           MOV     R5,A
   \   0000D7   90....       MOV     DPTR,#??i
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   9C           SUBB    A,R4
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   9D           SUBB    A,R5
   \   0000DF   40AD         JC      ??Rs485_Send_4
    123            Tx_Stack.CrcCheck = CRC_16(Send_Data,(12+Len));//CRCÐ£ÑéÂë
   \   0000E1                ; Setup parameters for call to function CRC_16
   \   0000E1   7A..         MOV     R2,#Send_Data & 0xff
   \   0000E3   7B..         MOV     R3,#(Send_Data >> 8) & 0xff
   \   0000E5   12....       LCALL   ??CRC_16?relay
   \   0000E8   90....       MOV     DPTR,#Tx_Stack + 212
   \   0000EB   EA           MOV     A,R2
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   EB           MOV     A,R3
   \   0000EF   F0           MOVX    @DPTR,A
    124            Send_Data[12+Len] = Tx_Stack.CrcCheck>>8;
   \   0000F0   74..         MOV     A,#Send_Data & 0xff
   \   0000F2   25..         ADD     A,?V0 + 0
   \   0000F4   F8           MOV     R0,A
   \   0000F5   74..         MOV     A,#(Send_Data >> 8) & 0xff
   \   0000F7   3400         ADDC    A,#0x0
   \   0000F9   F9           MOV     R1,A
   \   0000FA   EB           MOV     A,R3
   \   0000FB   C0E0         PUSH    A
   \   0000FD   E8           MOV     A,R0
   \   0000FE   240C         ADD     A,#0xc
   \   000100   F582         MOV     DPL,A
   \   000102   E9           MOV     A,R1
   \   000103   3400         ADDC    A,#0x0
   \   000105   F583         MOV     DPH,A
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
    125            Send_Data[13+Len] = Tx_Stack.CrcCheck;    //CRCÐ£ÑéÂë
   \   00010A   90....       MOV     DPTR,#Tx_Stack + 212
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C0E0         PUSH    A
   \   000110   E8           MOV     A,R0
   \   000111   240D         ADD     A,#0xd
   \   000113   F582         MOV     DPL,A
   \   000115   E9           MOV     A,R1
   \   000116   3400         ADDC    A,#0x0
   \   000118   F583         MOV     DPH,A
   \   00011A   D0E0         POP     A
   \   00011C   F0           MOVX    @DPTR,A
    126            for(i=(14+Len);i<(18+Len);i++)
   \   00011D   E5..         MOV     A,?V0 + 0
   \   00011F   240E         ADD     A,#0xe
   \   000121   F8           MOV     R0,A
   \   000122   E4           CLR     A
   \   000123   3400         ADDC    A,#0x0
   \   000125   F9           MOV     R1,A
   \   000126   90....       MOV     DPTR,#??i
   \   000129   E8           MOV     A,R0
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   A3           INC     DPTR
   \   00012C   E9           MOV     A,R1
   \   00012D   8028         SJMP    ??Rs485_Send_5
    127            {
    128                Send_Data[i] = (0xEA+(i-14-Len));     //Ö¡Î²
   \                     ??Rs485_Send_6:
   \   00012F   90....       MOV     DPTR,#??i
   \   000132   E0           MOVX    A,@DPTR
   \   000133   24F2         ADD     A,#-0xe
   \   000135   C3           CLR     C
   \   000136   95..         SUBB    A,?V0 + 2
   \   000138   24EA         ADD     A,#-0x16
   \   00013A   C0E0         PUSH    A
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   24..         ADD     A,#Send_Data & 0xff
   \   00013F   F8           MOV     R0,A
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   34..         ADDC    A,#(Send_Data >> 8) & 0xff
   \   000144   F9           MOV     R1,A
   \   000145   8882         MOV     DPL,R0
   \   000147   8983         MOV     DPH,R1
   \   000149   D0E0         POP     A
   \   00014B   F0           MOVX    @DPTR,A
    129            }
   \   00014C   90....       MOV     DPTR,#??i
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   2401         ADD     A,#0x1
   \   000152   F0           MOVX    @DPTR,A
   \   000153   A3           INC     DPTR
   \   000154   E0           MOVX    A,@DPTR
   \   000155   3400         ADDC    A,#0x0
   \                     ??Rs485_Send_5:
   \   000157   F0           MOVX    @DPTR,A
   \   000158   E5..         MOV     A,?V0 + 0
   \   00015A   2412         ADD     A,#0x12
   \   00015C   FE           MOV     R6,A
   \   00015D   E4           CLR     A
   \   00015E   3400         ADDC    A,#0x0
   \   000160   FF           MOV     R7,A
   \   000161   90....       MOV     DPTR,#??i
   \   000164   E0           MOVX    A,@DPTR
   \   000165   9E           SUBB    A,R6
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   9F           SUBB    A,R7
   \   000169   40C4         JC      ??Rs485_Send_6
    130          
    131            RS485_TX_EN();//¿ªÆô485·¢ËÍ
   \   00016B   D293         SETB    0x90.3
    132            Rs485_delay_ms(5);
   \   00016D                ; Setup parameters for call to function Rs485_delay_ms
   \   00016D   7A05         MOV     R2,#0x5
   \   00016F   7B00         MOV     R3,#0x0
   \   000171   12....       LCALL   ??Rs485_delay_ms?relay
    133            USART1_SendString(Send_Data,(18+Len));    //485·¢ËÍÊý¾Ý
   \   000174                ; Setup parameters for call to function USART1_SendString
   \   000174   EE           MOV     A,R6
   \   000175   FC           MOV     R4,A
   \   000176   EF           MOV     A,R7
   \   000177   FD           MOV     R5,A
   \   000178   7A..         MOV     R2,#Send_Data & 0xff
   \   00017A   7B..         MOV     R3,#(Send_Data >> 8) & 0xff
   \   00017C   12....       LCALL   ??USART1_SendString?relay
    134            Rs485_delay_ms(5);
   \   00017F                ; Setup parameters for call to function Rs485_delay_ms
   \   00017F   7A05         MOV     R2,#0x5
   \   000181   7B00         MOV     R3,#0x0
   \   000183   12....       LCALL   ??Rs485_delay_ms?relay
    135            RS485_RX_EN();//¿ªÆô485½ÓÊÕ
   \   000186   C293         CLR     0x90.3
    136          }
   \   000188   7F06         MOV     R7,#0x6
   \   00018A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00018D                REQUIRE _A_P1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??i:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    137          
    138          //==========================================================
    139          //	º¯ÊýÃû³Æ£º	Rs485_Receive()
    140          //
    141          //	º¯Êý¹¦ÄÜ£º	485½ÓÊÕ
    142          //
    143          //	Èë¿Ú²ÎÊý£º	data:485Êý¾Ý
    144          //
    145          //	·µ»Ø²ÎÊý£º	ÎÞ
    146          //
    147          //	ËµÃ÷£º		
    148          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    149          void Rs485_Receive(uint8_t data)
   \                     Rs485_Receive:
    150          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    151              static uint8_t End_Flag     = 0;	//Ö¡Î²±êÖ¾Î»
    152              static uint8_t Header_Flag  = 0;	//Ö¡Í·±êÖ¾Î»
    153              static uint8_t Receive_Flag = 0;	//½ÓÊÕ±êÖ¾Î»
    154          
    155          /*
    156          *
    157          *	Ö¡Í·½ÓÊÕ
    158          *
    159          */
    160              /*Ö¡Í·1 Êý¾ÝÖ¡Í·ÖÐµÚÒ»¸ö×Ö½Ú*/
    161              if(data == 0xE1) Header_Flag = 1;
   \   000004   74E1         MOV     A,#-0x1f
   \   000006   69           XRL     A,R1
   \   000007   90....       MOV     DPTR,#??Header_Flag
   \   00000A   7004         JNZ     ??Rs485_Receive_0
   \   00000C   7401         MOV     A,#0x1
   \   00000E   8042         SJMP    ??Rs485_Receive_1
    162          
    163              /*Ö¡Í·2 Êý¾ÝÖ¡Í·ÖÐµÚ¶þ¸ö×Ö½Ú*/
    164              else if(Header_Flag == 1 && data == 0xE2) Header_Flag = 2;
   \                     ??Rs485_Receive_0:
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6401         XRL     A,#0x1
   \   000013   7009         JNZ     ??Rs485_Receive_2
   \   000015   74E2         MOV     A,#-0x1e
   \   000017   69           XRL     A,R1
   \   000018   7004         JNZ     ??Rs485_Receive_2
   \   00001A   7402         MOV     A,#0x2
   \   00001C   8034         SJMP    ??Rs485_Receive_1
    165          
    166              /*Ö¡Í·3 Êý¾ÝÖ¡Í·ÖÐµÚÈý¸ö×Ö½Ú*/
    167              else if(Header_Flag == 2 && data == 0xE3) Header_Flag = 3;
   \                     ??Rs485_Receive_2:
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   7009         JNZ     ??Rs485_Receive_3
   \   000023   74E3         MOV     A,#-0x1d
   \   000025   69           XRL     A,R1
   \   000026   7004         JNZ     ??Rs485_Receive_3
   \   000028   7403         MOV     A,#0x3
   \   00002A   8026         SJMP    ??Rs485_Receive_1
    168              
    169              /*Ö¡Í·4 Êý¾ÝÖ¡Í·ÖÐµÚËÄ¸ö×Ö½Ú*/
    170              else if(Header_Flag == 3 && data == 0xE4)
   \                     ??Rs485_Receive_3:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6403         XRL     A,#0x3
   \   00002F   7020         JNZ     ??Rs485_Receive_4
   \   000031   74E4         MOV     A,#-0x1c
   \   000033   69           XRL     A,R1
   \   000034   701B         JNZ     ??Rs485_Receive_4
    171              {
    172                  Receive_Data[0] = 0xE1;
   \   000036   90....       MOV     DPTR,#Receive_Data
   \   000039   74E1         MOV     A,#-0x1f
   \   00003B   F0           MOVX    @DPTR,A
    173                  Receive_Data[1] = 0xE2;
   \   00003C   A3           INC     DPTR
   \   00003D   04           INC     A
   \   00003E   F0           MOVX    @DPTR,A
    174                  Receive_Data[2] = 0xE3; //Ö¡Í·½ÓÊÕÍê³É£¬´æÈëÖ¡Í·Êý¾Ý
   \   00003F   A3           INC     DPTR
   \   000040   04           INC     A
   \   000041   F0           MOVX    @DPTR,A
    175                  USART1_RX_STA = 3;      //´æ·ÅÊý¾ÝÊý×éÏÂ±êÇåÁã
   \   000042   90....       MOV     DPTR,#USART1_RX_STA
   \   000045   7403         MOV     A,#0x3
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
    176                  Receive_Flag = 1;       //¿ªÊ¼½ÓÊÕÊý¾Ý±êÖ¾Î»
   \   00004B   90....       MOV     DPTR,#??Receive_Flag
   \   00004E   04           INC     A
   \   00004F   8001         SJMP    ??Rs485_Receive_1
    177              }
    178          
    179              else Header_Flag = 0;
   \                     ??Rs485_Receive_4:
   \   000051   E4           CLR     A
   \                     ??Rs485_Receive_1:
   \   000052   F0           MOVX    @DPTR,A
    180          	
    181          /*
    182          *
    183          *	Êý¾Ý+Ö¡Î²½ÓÊÕ
    184          *
    185          */
    186              if(Receive_Flag)	//Ö¡Í·½ÓÊÕÍê³É,×¼±¸½ÓÊÕÖ¡Î²
   \   000053   90....       MOV     DPTR,#??Receive_Flag
   \   000056   E0           MOVX    A,@DPTR
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??Rs485_Receive_5 & 0xFFFF
    187              {
    188                  if(USART1_RX_STA>=(Receive_REC_LEN-1))
   \   00005C   90....       MOV     DPTR,#USART1_RX_STA
   \   00005F   C3           CLR     C
   \   000060   E0           MOVX    A,@DPTR
   \   000061   94C7         SUBB    A,#-0x39
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   9400         SUBB    A,#0x0
   \   000067   400F         JC      ??Rs485_Receive_6
    189                  {
    190                      End_Flag = 0;
   \   000069   90....       MOV     DPTR,#??End_Flag
   \   00006C   E4           CLR     A
   \   00006D   F0           MOVX    @DPTR,A
    191                      Receive_Flag = 0;
   \   00006E   90....       MOV     DPTR,#??Receive_Flag
   \   000071   F0           MOVX    @DPTR,A
    192                      USART1_RX_STA = 0;
   \   000072   90....       MOV     DPTR,#USART1_RX_STA
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   F0           MOVX    @DPTR,A
    193                  }
    194          
    195                  Receive_Data[USART1_RX_STA++] = data;	//Êý¾Ý½ÓÊÕ
   \                     ??Rs485_Receive_6:
   \   000078   E9           MOV     A,R1
   \   000079   C0E0         PUSH    A
   \   00007B   90....       MOV     DPTR,#USART1_RX_STA
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   24..         ADD     A,#Receive_Data & 0xff
   \   000081   FA           MOV     R2,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   34..         ADDC    A,#(Receive_Data >> 8) & 0xff
   \   000086   FB           MOV     R3,A
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   90....       MOV     DPTR,#USART1_RX_STA
   \   000091   E0           MOVX    A,@DPTR
   \   000092   2401         ADD     A,#0x1
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   3400         ADDC    A,#0x0
   \   000099   F0           MOVX    @DPTR,A
    196          
    197                  /*Ö¡Î²1 Êý¾ÝÖ¡Î²ÖÐµÚÒ»¸ö×Ö½Ú*/
    198                  if(data == 0xEA)	End_Flag = 1;
   \   00009A   74EA         MOV     A,#-0x16
   \   00009C   69           XRL     A,R1
   \   00009D   90....       MOV     DPTR,#??End_Flag
   \   0000A0   7004         JNZ     ??Rs485_Receive_7
   \   0000A2   7401         MOV     A,#0x1
   \   0000A4   803A         SJMP    ??Rs485_Receive_8
    199          
    200                  /*Ö¡Î²2  Êý¾ÝÖ¡Î²ÖÐµÚ¶þ¸ö×Ö½Ú*/
    201                  else if(End_Flag == 1 && data == 0xEB)	End_Flag = 2;
   \                     ??Rs485_Receive_7:
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   6401         XRL     A,#0x1
   \   0000A9   7009         JNZ     ??Rs485_Receive_9
   \   0000AB   74EB         MOV     A,#-0x15
   \   0000AD   69           XRL     A,R1
   \   0000AE   7004         JNZ     ??Rs485_Receive_9
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   802C         SJMP    ??Rs485_Receive_8
    202          
    203                  /*Ö¡Î²3  Êý¾ÝÖ¡Î²ÖÐµÚÈý¸ö×Ö½Ú*/
    204                  else if(End_Flag == 2 && data == 0xEC)	End_Flag = 3;
   \                     ??Rs485_Receive_9:
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   6402         XRL     A,#0x2
   \   0000B7   7009         JNZ     ??Rs485_Receive_10
   \   0000B9   74EC         MOV     A,#-0x14
   \   0000BB   69           XRL     A,R1
   \   0000BC   7004         JNZ     ??Rs485_Receive_10
   \   0000BE   7403         MOV     A,#0x3
   \   0000C0   801E         SJMP    ??Rs485_Receive_8
    205          
    206                  /*Ö¡Î²4  Êý¾ÝÖ¡Î²ÖÐµÚËÄ¸ö×Ö½Ú*/
    207                  else if(End_Flag == 3 && data == 0xED)
   \                     ??Rs485_Receive_10:
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   6403         XRL     A,#0x3
   \   0000C5   7018         JNZ     ??Rs485_Receive_11
   \   0000C7   74ED         MOV     A,#-0x13
   \   0000C9   69           XRL     A,R1
   \   0000CA   7013         JNZ     ??Rs485_Receive_11
    208                  {
    209                      USART1_RX_STA = 0x8000;	//½ÓÊÕÍê³É
   \   0000CC   90....       MOV     DPTR,#USART1_RX_STA
   \   0000CF   E4           CLR     A
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   7480         MOV     A,#-0x80
   \   0000D4   F0           MOVX    @DPTR,A
    210                      Receive_Flag = 0;
   \   0000D5   90....       MOV     DPTR,#??Receive_Flag
   \   0000D8   E4           CLR     A
   \   0000D9   F0           MOVX    @DPTR,A
    211                      End_Flag = 0;
   \   0000DA   90....       MOV     DPTR,#??End_Flag
   \   0000DD   8001         SJMP    ??Rs485_Receive_8
    212                  }
    213          
    214                  /*»¹Ã»½ÓÊÕµ½Ö¡Î²*/
    215                  else End_Flag = 0;
   \                     ??Rs485_Receive_11:
   \   0000DF   E4           CLR     A
   \                     ??Rs485_Receive_8:
   \   0000E0   F0           MOVX    @DPTR,A
    216              }
    217          }
   \                     ??Rs485_Receive_5:
   \   0000E1   D083         POP     DPH
   \   0000E3   D082         POP     DPL
   \   0000E5   02....       LJMP    ?BRET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??End_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Header_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Receive_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    218          
    219          //==========================================================
    220          //	º¯ÊýÃû³Æ£º	DataHandling_485()
    221          //
    222          //	º¯Êý¹¦ÄÜ£º	485Êý¾Ý´¦Àíº¯Êý
    223          //
    224          //	Èë¿Ú²ÎÊý£º	DesAddr	:Ä¿µÄµØÖ·
    225          //              
    226          //	·µ»Ø²ÎÊý£º	0:Êý¾Ý½ÓÊÕÍê³É
    227          //			1:Êý¾Ý½ÓÊÕ´íÎó
    228          //
    229          //	ËµÃ÷£º		
    230          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    231          uint8_t DataHandling_485(uint16_t DesAddr)
   \                     DataHandling_485:
    232          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    233            static uint16_t i = 0;
    234            static uint8_t Return_Value = 0;      //·µ»ØÖµ
    235            static uint16_t Crc16Check = 0;	//´æ·ÅCRCÐ£ÑéÊý¾Ý
    236          
    237            if(USART1_RX_STA == 0x8000)
   \   000005   90....       MOV     DPTR,#USART1_RX_STA
   \   000008   E0           MOVX    A,@DPTR
   \   000009   7004         JNZ     ??DataHandling_485_0
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6480         XRL     A,#0x80
   \                     ??DataHandling_485_0:
   \   00000F   90....       MOV     DPTR,#??Return_Value
   \   000012   6003         JZ      $+5
   \   000014   02....       LJMP    ??DataHandling_485_1 & 0xFFFF
    238            {
    239                Return_Value = 0;
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    240                if((Receive_Data[7]*256+Receive_Data[8]) == DesAddr)//¶Ô±ÈÔ´µØÖ·ÊÇÏëÒªµÄÊý¾Ý£¬È«²¿½ÓÊÕÏÂÀ´
   \   000019   90....       MOV     DPTR,#Receive_Data + 7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   EA           MOV     A,R2
   \   000022   68           XRL     A,R0
   \   000023   7002         JNZ     ??DataHandling_485_2
   \   000025   EB           MOV     A,R3
   \   000026   69           XRL     A,R1
   \                     ??DataHandling_485_2:
   \   000027   6003         JZ      $+5
   \   000029   02....       LJMP    ??DataHandling_485_3 & 0xFFFF
    241                {
    242                    /*°üÐòºÅ*/
    243                    Rx_Stack.Pack_Num = Receive_Data[4];
   \   00002C   90....       MOV     DPTR,#Receive_Data + 4
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   90....       MOV     DPTR,#Rx_Stack + 4
   \   000033   F0           MOVX    @DPTR,A
    244            
    245                    /*Ô´µØÖ·*/
    246                    Rx_Stack.Src_Adr = Receive_Data[5]*256+Receive_Data[6];
   \   000034   90....       MOV     DPTR,#Receive_Data + 5
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FB           MOV     R3,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   90....       MOV     DPTR,#Rx_Stack + 5
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EB           MOV     A,R3
   \   000041   F0           MOVX    @DPTR,A
    247            
    248                    /*Ä¿µÄµØÖ·*/
    249                    Rx_Stack.Dst_Adr = Receive_Data[7]*256+Receive_Data[8];
   \   000042   A3           INC     DPTR
   \   000043   E8           MOV     A,R0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E9           MOV     A,R1
   \   000047   F0           MOVX    @DPTR,A
    250            
    251                    /*ÃüÁîÂë*/
    252                    Rx_Stack.Command = Receive_Data[9]*256+Receive_Data[10];
   \   000048   90....       MOV     DPTR,#Receive_Data + 9
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   90....       MOV     DPTR,#Rx_Stack + 9
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   F0           MOVX    @DPTR,A
    253            
    254                    /*Êý¾Ý³¤¶È*/
    255                    Rx_Stack.Data_Len = Receive_Data[11];
   \   000056   90....       MOV     DPTR,#Receive_Data + 11
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   90....       MOV     DPTR,#Rx_Stack + 11
   \   00005D   F0           MOVX    @DPTR,A
    256            
    257                    /*Êý¾Ý*/
    258                    for(i=12;i<(Rx_Stack.Data_Len+12);i++)
   \   00005E   90....       MOV     DPTR,#??i_1
   \   000061   740C         MOV     A,#0xc
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E4           CLR     A
   \   000066   8031         SJMP    ??DataHandling_485_4
    259                    {
    260                        Rx_Stack.Data[(i-12)] = Receive_Data[i];
   \                     ??DataHandling_485_5:
   \   000068   90....       MOV     DPTR,#??i_1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   24..         ADD     A,#Receive_Data & 0xff
   \   00006E   F8           MOV     R0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   34..         ADDC    A,#(Receive_Data >> 8) & 0xff
   \   000073   F9           MOV     R1,A
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   C0E0         PUSH    A
   \   00007B   90....       MOV     DPTR,#??i_1
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   24..         ADD     A,#Rx_Stack & 0xff
   \   000081   F8           MOV     R0,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   34..         ADDC    A,#(Rx_Stack >> 8) & 0xff
   \   000086   F9           MOV     R1,A
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
    261                    }
   \   00008E   90....       MOV     DPTR,#??i_1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   2401         ADD     A,#0x1
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   3400         ADDC    A,#0x0
   \                     ??DataHandling_485_4:
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   90....       MOV     DPTR,#Rx_Stack + 11
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F8           MOV     R0,A
   \   00009F   240C         ADD     A,#0xc
   \   0000A1   FC           MOV     R4,A
   \   0000A2   E4           CLR     A
   \   0000A3   3400         ADDC    A,#0x0
   \   0000A5   FD           MOV     R5,A
   \   0000A6   90....       MOV     DPTR,#??i_1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   9C           SUBB    A,R4
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   9D           SUBB    A,R5
   \   0000AE   40B8         JC      ??DataHandling_485_5
    262            
    263                    /*CRCÐ£ÑéÂë¸ß°ËÎ»*/
    264                    Rx_Stack.CrcCheck = Receive_Data[(12+Rx_Stack.Data_Len)]*256;
   \   0000B0   74..         MOV     A,#Receive_Data & 0xff
   \   0000B2   28           ADD     A,R0
   \   0000B3   F8           MOV     R0,A
   \   0000B4   74..         MOV     A,#(Receive_Data >> 8) & 0xff
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   240C         ADD     A,#0xc
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E9           MOV     A,R1
   \   0000BF   3400         ADDC    A,#0x0
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FB           MOV     R3,A
   \   0000C5   90....       MOV     DPTR,#Rx_Stack + 212
   \   0000C8   E4           CLR     A
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   EB           MOV     A,R3
   \   0000CC   F0           MOVX    @DPTR,A
    265            
    266                    /*CRCÐ£ÑéÂëµÍ°ËÎ»*/
    267                    Rx_Stack.CrcCheck += Receive_Data[(13+Rx_Stack.Data_Len)];
   \   0000CD   E8           MOV     A,R0
   \   0000CE   240D         ADD     A,#0xd
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   E9           MOV     A,R1
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F8           MOV     R0,A
   \   0000D9   90....       MOV     DPTR,#Rx_Stack + 212
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   28           ADD     A,R0
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   3400         ADDC    A,#0x0
   \   0000E3   F0           MOVX    @DPTR,A
    268                    Crc16Check = CRC_16(Receive_Data,(12+Rx_Stack.Data_Len));
   \   0000E4                ; Setup parameters for call to function CRC_16
   \   0000E4   7A..         MOV     R2,#Receive_Data & 0xff
   \   0000E6   7B..         MOV     R3,#(Receive_Data >> 8) & 0xff
   \   0000E8   12....       LCALL   ??CRC_16?relay
   \   0000EB   90....       MOV     DPTR,#??Crc16Check
   \   0000EE   EA           MOV     A,R2
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   EB           MOV     A,R3
   \   0000F2   F0           MOVX    @DPTR,A
    269                    if(Crc16Check != Rx_Stack.CrcCheck)
   \   0000F3   90....       MOV     DPTR,#??Crc16Check
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F8           MOV     R0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F9           MOV     R1,A
   \   0000FB   90....       MOV     DPTR,#Rx_Stack + 212
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   68           XRL     A,R0
   \   000100   7003         JNZ     ??DataHandling_485_6
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   69           XRL     A,R1
   \                     ??DataHandling_485_6:
   \   000105   6006         JZ      ??DataHandling_485_7
    270                    {
    271                        Return_Value = 1;
   \                     ??DataHandling_485_3:
   \   000107   90....       MOV     DPTR,#??Return_Value
   \   00010A   7401         MOV     A,#0x1
   \   00010C   F0           MOVX    @DPTR,A
    272                    }
    273                }
    274                else Return_Value = 1;
    275                
    276                memset(Receive_Data,0,Receive_REC_LEN);//Çå¿Õ½ÓÊÕÊý×é
   \                     ??DataHandling_485_7:
   \   00010D                ; Setup parameters for call to function memset
   \   00010D   75..C8       MOV     ?V0 + 0,#-0x38
   \   000110   75..00       MOV     ?V0 + 1,#0x0
   \   000113   78..         MOV     R0,#?V0 + 0
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   7C00         MOV     R4,#0x0
   \   00011A   7D00         MOV     R5,#0x0
   \   00011C   7A..         MOV     R2,#Receive_Data & 0xff
   \   00011E   7B..         MOV     R3,#(Receive_Data >> 8) & 0xff
   \   000120   12....       LCALL   ??memset?relay
   \   000123   7402         MOV     A,#0x2
   \   000125   12....       LCALL   ?DEALLOC_XSTACK8
    277                USART1_RX_STA = 0;
   \   000128   90....       MOV     DPTR,#USART1_RX_STA
   \   00012B   E4           CLR     A
   \   00012C   F0           MOVX    @DPTR,A
   \   00012D   A3           INC     DPTR
   \   00012E   8002         SJMP    ??DataHandling_485_8
    278            }
    279            else Return_Value = 1;
   \                     ??DataHandling_485_1:
   \   000130   7401         MOV     A,#0x1
   \                     ??DataHandling_485_8:
   \   000132   F0           MOVX    @DPTR,A
    280          
    281            return Return_Value;	//·µ»Ø½ÓÊÕÇé¿ö
   \   000133   90....       MOV     DPTR,#??Return_Value
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F9           MOV     R1,A
   \   000138   7F02         MOV     R7,#0x2
   \   00013A   02....       LJMP    ?BANKED_LEAVE_XDATA
    282          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??i_1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Return_Value:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??Crc16Check:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    283          
    284          //==========================================================
    285          //	º¯ÊýÃû³Æ£º	calcByte()
    286          //
    287          //	º¯Êý¹¦ÄÜ£º	CRC_16×Ö½Ú¼ÆËãº¯Êý
    288          //
    289          //	Èë¿Ú²ÎÊý£º	crc:CRCÐ£ÑéÂë
    290          //			b:
    291          //              
    292          //	·µ»Ø²ÎÊý£º	ÎÞ
    293          //
    294          //	ËµÃ÷£º		
    295          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          uint16_t calcByte(uint16_t crc, uint8_t b)
   \                     calcByte:
    297          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    298              static uint16_t i = 0;	//Çå¿ÕÊý×éÊ±ForÑ­»·Ê¹ÓÃ	
    299              crc = crc ^ (int)b << 8;
   \   000004   E9           MOV     A,R1
   \   000005   6B           XRL     A,R3
   \   000006   FB           MOV     R3,A
    300              for (i = 0; i < 8; i++)
   \   000007   90....       MOV     DPTR,#??i_2
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   800F         SJMP    ??calcByte_0
    301              {
    302                  if ((crc & 0x8000) == 0x8000)
    303                  {
    304                      crc = crc << 1 ^ 0x1021;
    305                  }
    306                  else
    307                  {
    308                      crc = crc << 1;
   \                     ??calcByte_1:
   \   00000F   EC           MOV     A,R4
   \   000010   FA           MOV     R2,A
   \   000011   ED           MOV     A,R5
   \                     ??calcByte_2:
   \   000012   FB           MOV     R3,A
    309                  }
   \   000013   90....       MOV     DPTR,#??i_2
   \   000016   E0           MOVX    A,@DPTR
   \   000017   2401         ADD     A,#0x1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   3400         ADDC    A,#0x0
   \                     ??calcByte_0:
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   90....       MOV     DPTR,#??i_2
   \   000022   C3           CLR     C
   \   000023   E0           MOVX    A,@DPTR
   \   000024   9408         SUBB    A,#0x8
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   9400         SUBB    A,#0x0
   \   00002A   5019         JNC     ??calcByte_3
   \   00002C   EA           MOV     A,R2
   \   00002D   FC           MOV     R4,A
   \   00002E   EB           MOV     A,R3
   \   00002F   FD           MOV     R5,A
   \   000030   EC           MOV     A,R4
   \   000031   C3           CLR     C
   \   000032   33           RLC     A
   \   000033   FC           MOV     R4,A
   \   000034   ED           MOV     A,R5
   \   000035   33           RLC     A
   \   000036   FD           MOV     R5,A
   \   000037   EB           MOV     A,R3
   \   000038   5480         ANL     A,#0x80
   \   00003A   60D3         JZ      ??calcByte_1
   \   00003C   EC           MOV     A,R4
   \   00003D   6421         XRL     A,#0x21
   \   00003F   FA           MOV     R2,A
   \   000040   ED           MOV     A,R5
   \   000041   6410         XRL     A,#0x10
   \   000043   80CD         SJMP    ??calcByte_2
    310              }
    311              return crc & 0xffff;
   \                     ??calcByte_3:
   \   000045   D083         POP     DPH
   \   000047   D082         POP     DPL
   \   000049   02....       LJMP    ?BRET
    312          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??i_2:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    313          
    314          //==========================================================
    315          //	º¯ÊýÃû³Æ£º	CRC_16()
    316          //
    317          //	º¯Êý¹¦ÄÜ£º	CRC_16¼ÆËãº¯Êý
    318          //
    319          //	Èë¿Ú²ÎÊý£º	*p:	ÐèÒªÐ£ÑéµÄÊý¾Ý
    320          //			length: Ð£ÑéÊý¾Ý³¤¶È
    321          //              
    322          //	·µ»Ø²ÎÊý£º	wCRC16:16Î»CRCÐ£ÑéÂë
    323          //
    324          //	ËµÃ÷£º		
    325          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          uint16_t CRC_16(void *p, int length)
   \                     CRC_16:
    327          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    328              short wCRC16=0;
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
    329              uint8_t *pBuffer;
    330              static uint16_t i = 0;  //Çå¿ÕÊý×éÊ±ForÑ­»·Ê¹ÓÃ	
    331          
    332              if (( p==0 )||( length==0 ))
   \   000011   EE           MOV     A,R6
   \   000012   4F           ORL     A,R7
   \   000013   6005         JZ      ??CRC_16_0
   \   000015   EC           MOV     A,R4
   \   000016   45..         ORL     A,?V0 + 1
   \   000018   7004         JNZ     ??CRC_16_1
    333              {
    334                  return 0xFFFF;
   \                     ??CRC_16_0:
   \   00001A   1A           DEC     R2
   \   00001B   1B           DEC     R3
   \   00001C   8036         SJMP    ??CRC_16_2
    335              }
    336          
    337              pBuffer=(uint8_t *)p;
    338              for ( i = 0; i < length; i++)
   \                     ??CRC_16_1:
   \   00001E   90....       MOV     DPTR,#??i_3
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   8020         SJMP    ??CRC_16_3
    339              {
    340                  wCRC16 = calcByte(wCRC16, pBuffer[i]);
   \                     ??CRC_16_4:
   \   000026                ; Setup parameters for call to function calcByte
   \   000026   90....       MOV     DPTR,#??i_3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   EE           MOV     A,R6
   \   00002F   28           ADD     A,R0
   \   000030   F582         MOV     DPL,A
   \   000032   EF           MOV     A,R7
   \   000033   39           ADDC    A,R1
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??calcByte?relay
    341              }
   \   00003B   90....       MOV     DPTR,#??i_3
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   2401         ADD     A,#0x1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   3400         ADDC    A,#0x0
   \                     ??CRC_16_3:
   \   000046   F0           MOVX    @DPTR,A
   \   000047   90....       MOV     DPTR,#??i_3
   \   00004A   C3           CLR     C
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   95..         SUBB    A,?V0 + 0
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   95..         SUBB    A,?V0 + 1
   \   000052   40D2         JC      ??CRC_16_4
    342          
    343              return wCRC16;
   \                     ??CRC_16_2:
   \   000054   7F04         MOV     R7,#0x4
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    344          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??i_3:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    345          
    346          //==========================================================
    347          //	º¯ÊýÃû³Æ£º	Rs485_delay_ms()
    348          //
    349          //	º¯Êý¹¦ÄÜ£º	ºÁÃëÑÓÊ±º¯Êý
    350          //
    351          //	Èë¿Ú²ÎÊý£º	ÎÞ
    352          //
    353          //	·µ»Ø²ÎÊý£º	ÎÞ
    354          //
    355          //	ËµÃ÷£º		
    356          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void Rs485_delay_ms(unsigned int nms)
   \                     Rs485_delay_ms:
    358          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    359              unsigned int i = 0,j = 0;
    360              
    361              for(i = 0;i<nms;i++)
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   8019         SJMP    ??Rs485_delay_ms_0
    362              {
    363                  for(j = 0;j<9600;j++)
   \                     ??Rs485_delay_ms_1:
   \   000006   E8           MOV     A,R0
   \   000007   2401         ADD     A,#0x1
   \   000009   08           INC     R0
   \   00000A   E9           MOV     A,R1
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \                     ??Rs485_delay_ms_2:
   \   00000E   C3           CLR     C
   \   00000F   E8           MOV     A,R0
   \   000010   9480         SUBB    A,#-0x80
   \   000012   E9           MOV     A,R1
   \   000013   9425         SUBB    A,#0x25
   \   000015   40EF         JC      ??Rs485_delay_ms_1
   \   000017   EC           MOV     A,R4
   \   000018   2401         ADD     A,#0x1
   \   00001A   0C           INC     R4
   \   00001B   ED           MOV     A,R5
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   FD           MOV     R5,A
   \                     ??Rs485_delay_ms_0:
   \   00001F   C3           CLR     C
   \   000020   EC           MOV     A,R4
   \   000021   9A           SUBB    A,R2
   \   000022   ED           MOV     A,R5
   \   000023   9B           SUBB    A,R3
   \   000024   5006         JNC     ??Rs485_delay_ms_3
   \   000026   7800         MOV     R0,#0x0
   \   000028   7900         MOV     R1,#0x0
   \   00002A   80E2         SJMP    ??Rs485_delay_ms_2
    364                  {;}
    365              }
    366          }
   \                     ??Rs485_delay_ms_3:
   \   00002C   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_e1e2e3e4:
   \   000000   E4E3E2E1     DD 3789743076

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_eaebeced:
   \   000000   EDECEBEA     DD 3941330157

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Rs485_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Rs485_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Tx_Stack_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Tx_Stack_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Rx_Stack_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Rx_Stack_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Rs485_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Rs485_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Rs485_Receive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Rs485_Receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DataHandling_485?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DataHandling_485

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CRC_16?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CRC_16

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Rs485_delay_ms?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Rs485_delay_ms

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     CRC_16                     0      0     26
       -> calcByte              0      0     24
     DataHandling_485           1      0     12
       -> CRC_16                0      0     20
       -> memset                0      0     24
     Rs485_Init                 2      0      0
       -> Rx_Stack_Init         4      0      0
       -> Tx_Stack_Init         4      0      0
     Rs485_Receive              3      0      0
     Rs485_Send                 1      0     18
       -> CRC_16                0      0     28
       -> Rs485_delay_ms        0      0     28
       -> USART1_SendString     0      0     28
       -> Rs485_delay_ms        0      0     28
     Rs485_delay_ms             0      0     14
     Rx_Stack_Init              0      0     12
       -> memset                0      0     24
     Tx_Stack_Init              0      0     12
       -> memset                0      0     24
     calcByte                   2      0     12


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_P1                       1
     P1SEL                       1
     P1DIR                       1
     Send_Data                 200
     Receive_Data              200
     Tx_Stack                  218
     Rx_Stack                  218
     Rs485_Init                 25
     Tx_Stack_Init              86
     Rx_Stack_Init              86
     Rs485_Send                397
     i                           2
     Rs485_Receive             232
     End_Flag                    1
     Header_Flag                 1
     Receive_Flag                1
     DataHandling_485          317
     i                           2
     Return_Value                1
     Crc16Check                  2
     calcByte                   76
     i                           2
     CRC_16                     89
     i                           2
     Rs485_delay_ms             47
     __Constant_e1e2e3e4         4
     __Constant_eaebeced         4
     ??Rs485_Init?relay          6
     ??Tx_Stack_Init?relay       6
     ??Rx_Stack_Init?relay       6
     ??Rs485_Send?relay          6
     ??Rs485_Receive?relay       6
     ??DataHandling_485?relay    6
     ??calcByte?relay            6
     ??CRC_16?relay              6
     ??Rs485_delay_ms?relay      6

 
 1 355 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
     8 bytes in segment XDATA_ROM_C
   850 bytes in segment XDATA_Z
 
 1 409 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 3 bytes shared)
   850 bytes of XDATA memory

Errors: none
Warnings: 1
