###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         02/May/2023  10:29:43 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\Source\C #
#                          oordinator.c                                       #
#    Command line       =  -f D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹â #
#                          µç¿ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg           #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg             #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF11                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\Source\C #
#                          oordinator.c -D ZIGBEEPRO -D ZTOOL_P1 -D           #
#                          MT_SYS_FUNC -D xMT_ZDO_FUNC -D                     #
#                          LCD_SUPPORTED=DEBUG -D NV_RESTORE -lC              #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \CoordinatorEB\List\ -lA                           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \CoordinatorEB\List\ --diag_suppress Pe001,Pa010   #
#                          -o D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹â #
#                          µç¿ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\CoordinatorEB\Obj\ -e --debug --core=plain     #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½ #
#                          Ì³Ì\CC2530\NODERED-¹âµç¿ª¹Ø¼ì²â\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\ -I                       #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\SOURCE\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC253 #
#                          0\NODERED-¹âµç¿ª¹Ø¼ì²â\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I        #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MT\ -I                  #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I         #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\    #
#                          -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹â #
#                          µç¿ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I   #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I        #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\AF\ -I            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SEC\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I          #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I           #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I            #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I                #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I      #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I      #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I         #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I      #
#                          D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\    #
#                          -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹â #
#                          µç¿ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ #
#                          SINGLE_CHIP\ -I D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC25 #
#                          30\NODERED-¹âµç¿ª¹Ø¼ì²â\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HARDWAR #
#                          E\ -Ohz                                            #
#    List file          =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \CoordinatorEB\List\Coordinator.lst                #
#    Object file        =  D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ #
#                          ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \CoordinatorEB\Obj\Coordinator.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ª¹Ø¼ì²â\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
      1          #include "ZComDef.h"

  /**************************************************************************************************
                                                                                                    ^
"D:\×ÊÁÏ\°Ë³Ç-V2\·ä³²\ÐÂ±à½Ì³Ì\CC2530\NODERED-¹âµç¿ª¹Ø¼ì²â\COMPONENTS\OSAL\INCLUDE\ZComDef.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
      2          #include "hal_drivers.h"
      3          #include "OSAL.h"
      4          #include "OSAL_Tasks.h"
      5          #include "nwk.h"
      6          #include "APS.h"
      7          #include "ZDApp.h"
      8          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
      9            #include "ZDNwkMgr.h"
     10          #endif
     11          #if defined ( ZIGBEE_FRAGMENTATION )
     12            #include "aps_frag.h"
     13          #endif
     14          
     15          #include "SampleApp.h"
     16          #include "WiFiGate.h"
     17          #include "OSAL.h"
     18          #include "ZGlobals.h"
     19          #include "AF.h"
     20          #include "aps_groups.h"
     21          #include "ZDApp.h"
     22          
     23          #include "SampleApp.h"
     24          #include "SampleAppHw.h"
     25          
     26          #include "OnBoard.h"
     27          
     28          /* HAL */
     29          #include "hal_lcd.h"
     30          #include "hal_led.h"
     31          #include "hal_key.h"
     32          #include "string.h"
     33          
     34          #include "MT_UART.h"
     35          #include "MT_APP.h"
     36          #include "MT.h"
     37          #include "OLED.h"
     38          #include "SHT20.h"
     39          #include "bottom_led.h"
     40          #include "stdio.h"
     41          #include "UART2RS485.h"
     42          #include "WiFiGate.h"
     43          #include "_bind.h"
     44          #include "led_mode.h"
     45          
     46          // The order in this table must be identical to the task initialization calls below in osalInitTask.

   \                                 In  segment XDATA_ROM_C, align 1
     47          const pTaskEventHandlerFn tasksArr[] = {
   \                     tasksArr:
   \   000000   ....         DW ??macEventLoop?relay
   \   000002   ....         DW ??nwk_event_loop?relay
   \   000004   ....         DW ??Hal_ProcessEvent?relay
   \   000006   ....         DW ??APS_event_loop?relay
   \   000008   ....         DW ??APSF_ProcessEvent?relay
   \   00000A   ....         DW ??ZDApp_event_loop?relay
   \   00000C   ....         DW ??ZDNwkMgr_event_loop?relay
   \   00000E   ....         DW ??WiFiGate_ProcessEvent?relay
   \   000010   ....         DW ??SampleApp_ProcessEvent?relay
     48            macEventLoop,
     49            nwk_event_loop,
     50            Hal_ProcessEvent,
     51          #if defined( MT_TASK )
     52            MT_ProcessEvent,
     53          #endif
     54            APS_event_loop,
     55          #if defined ( ZIGBEE_FRAGMENTATION )
     56            APSF_ProcessEvent,
     57          #endif
     58            ZDApp_event_loop,
     59          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
     60            ZDNwkMgr_event_loop,
     61          #endif
     62            WiFiGate_ProcessEvent,
     63            SampleApp_ProcessEvent,  
     64          };

   \                                 In  segment XDATA_ROM_C, align 1
     65          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
   \                     tasksCnt:
   \   000000   09           DB 9

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          uint16 *tasksEvents;
   \                     tasksEvents:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     67          
     68          /*********************************************************************
     69           * @fn      osalInitTasks
     70           *
     71           * @brief   This function invokes the initialization function for each task.
     72           *
     73           * @param   void
     74           *
     75           * @return  none
     76           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          void osalInitTasks( void )
   \                     osalInitTasks:
     78          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     79            uint8 taskID = 0;
     80          
     81            tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);
   \   000004                ; Setup parameters for call to function osal_mem_alloc
   \   000004   7A12         MOV     R2,#0x12
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??osal_mem_alloc?relay
   \   00000B   90....       MOV     DPTR,#tasksEvents
   \   00000E   EA           MOV     A,R2
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   EB           MOV     A,R3
   \   000012   F0           MOVX    @DPTR,A
     82            osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));
   \   000013                ; Setup parameters for call to function osal_memset
   \   000013   7C12         MOV     R4,#0x12
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??osal_memset?relay
     83          
     84            macTaskInit( taskID++ );
   \   00001C                ; Setup parameters for call to function macTaskInit
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   12....       LCALL   ??macTaskInit?relay
     85            nwk_init( taskID++ );
   \   000021                ; Setup parameters for call to function nwk_init
   \   000021   7901         MOV     R1,#0x1
   \   000023   12....       LCALL   ??nwk_init?relay
     86            Hal_Init( taskID++ );
   \   000026                ; Setup parameters for call to function Hal_Init
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   ??Hal_Init?relay
     87          #if defined( MT_TASK )
     88            MT_TaskInit( taskID++ );
     89          #endif
     90            APS_Init( taskID++ );
   \   00002B                ; Setup parameters for call to function APS_Init
   \   00002B   7903         MOV     R1,#0x3
   \   00002D   12....       LCALL   ??APS_Init?relay
     91          #if defined ( ZIGBEE_FRAGMENTATION )
     92            APSF_Init( taskID++ );
   \   000030                ; Setup parameters for call to function APSF_Init
   \   000030   7904         MOV     R1,#0x4
   \   000032   12....       LCALL   ??APSF_Init?relay
     93          #endif
     94            ZDApp_Init( taskID++ );
   \   000035                ; Setup parameters for call to function ZDApp_Init
   \   000035   7905         MOV     R1,#0x5
   \   000037   12....       LCALL   ??ZDApp_Init?relay
     95          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
     96            ZDNwkMgr_Init( taskID++ );
   \   00003A                ; Setup parameters for call to function ZDNwkMgr_Init
   \   00003A   7906         MOV     R1,#0x6
   \   00003C   12....       LCALL   ??ZDNwkMgr_Init?relay
     97          #endif
     98            WiFiGate_Init( taskID++ );
   \   00003F                ; Setup parameters for call to function WiFiGate_Init
   \   00003F   7907         MOV     R1,#0x7
   \   000041   12....       LCALL   ??WiFiGate_Init?relay
     99            SampleApp_Init( taskID++ ); 
   \   000044                ; Setup parameters for call to function SampleApp_Init
   \   000044   7908         MOV     R1,#0x8
   \   000046   12....       LCALL   ??SampleApp_Init?relay
    100          }
   \   000049   D083         POP     DPH
   \   00004B   D082         POP     DPL
   \   00004D   02....       LJMP    ?BRET
    101          

   \                                 In  segment XDATA_ROM_C, align 1
    102          const cId_t InClusterList[1] =
   \                     InClusterList:
   \   000000   0100         DW 1
    103          {
    104            SWITCH_CLUSTERID
    105          };
    106          

   \                                 In  segment XDATA_ROM_C, align 1
    107          const SimpleDescriptionFormat_t Coordinator_SimpleDesc =
   \                     Coordinator_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW InClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
    108          {
    109            SAMPLEAPP_ENDPOINT,                 //  int Endpoint;
    110            SAMPLEAPP_PROFID,                   //  uint16 AppProfId[2];
    111            SAMPLEAPP_DEVICEID,                 //  uint16 AppDeviceId[2];
    112            SAMPLEAPP_DEVICE_VERSION,           //  int   AppDevVer:4;
    113            SAMPLEAPP_FLAGS,                    //  int   AppFlags:4;
    114            1,                                  //  uint8  AppNumInClusters;
    115            (cId_t *)InClusterList,             //  uint8 *pAppInClusterList;
    116            0,                                  //  uint8  AppNumOutClusters;
    117            (cId_t *)NULL                       //  uint8 *pAppOutClusterList;
    118          };
    119          // This is the Endpoint/Interface description.  It is defined here, but
    120          // filled-in in SampleApp_Init().  Another way to go would be to fill
    121          // in the structure here and make it a "const" (in code space).  The
    122          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          endPointDesc_t Coordinator_epDesc;
   \                     Coordinator_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    124          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    126                                    // This variable will be received when
    127                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    129          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          afAddrType_t Point_To_Point_DstAddr;//µã¶ÔµãÍ¨ÐÅ¶¨Òå
   \                     Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          afAddrType_t Boardcast_DstAddr;//µã¶ÔµãÍ¨ÐÅ¶¨Òå
   \                     Boardcast_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    135          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );//½ÓÊÕµ½ÎÞÏßÏûÏ¢»Øµ÷º¯Êý
    136          /*********************************************************************
    137           * @fn      SampleApp_Init
    138           *
    139           * @brief   Initialization function for the Generic App Task.
    140           *          This is called during initialization and should contain
    141           *          any application specific initialization (ie. hardware
    142           *          initialization/setup, table initialization, power up
    143           *          notificaiton ... ).
    144           *
    145           * @param   task_id - the ID assigned by OSAL.  This ID should be
    146           *                    used to send messages and set timers.
    147           *
    148           * @return  none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    151          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    152            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    153            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    154            SampleApp_TransID = 0;  
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    155          
    156          	UartInit(HAL_UART_PORT_1,HAL_UART_BR_115200);//µ÷ÊÔ´®¿Ú³õÊ¼»¯
   \   000015                ; Setup parameters for call to function UartInit
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   ??UartInit?relay
    157            //OLED_Init();                    //³õÊ¼»¯OLED 
    158            //printf("i am coordinator\r\n"); //´®¿Ú´òÓ¡
    159            //OLED_P8x16Str(0,0,"coordinator");
    160            
    161            // µã¶ÔµãÍ¨Ñ¶¶¨Òå
    162            Point_To_Point_DstAddr.addrMode       = (afAddrMode_t)Addr16Bit; //µã²¥
   \   00001C   90....       MOV     DPTR,#Point_To_Point_DstAddr + 8
   \   00001F   7402         MOV     A,#0x2
   \   000021   F0           MOVX    @DPTR,A
    163            Point_To_Point_DstAddr.endPoint       = SAMPLEAPP_ENDPOINT;      
   \   000022   A3           INC     DPTR
   \   000023   7414         MOV     A,#0x14
   \   000025   F0           MOVX    @DPTR,A
    164            Point_To_Point_DstAddr.addr.shortAddr = 0;
   \   000026   90....       MOV     DPTR,#Point_To_Point_DstAddr
   \   000029   E4           CLR     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   F0           MOVX    @DPTR,A
    165            
    166            // ÌîÐ´¶Ëµã
    167            Coordinator_epDesc.endPoint   = SAMPLEAPP_ENDPOINT;
   \   00002D   90....       MOV     DPTR,#Coordinator_epDesc
   \   000030   7414         MOV     A,#0x14
   \   000032   F0           MOVX    @DPTR,A
    168            Coordinator_epDesc.task_id    = &SampleApp_TaskID;
   \   000033   A3           INC     DPTR
   \   000034   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00003A   F0           MOVX    @DPTR,A
    169            Coordinator_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&Coordinator_SimpleDesc;
   \   00003B   A3           INC     DPTR
   \   00003C   74..         MOV     A,#Coordinator_SimpleDesc & 0xff
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   74..         MOV     A,#(Coordinator_SimpleDesc >> 8) & 0xff
   \   000042   F0           MOVX    @DPTR,A
    170            Coordinator_epDesc.latencyReq = noLatencyReqs;
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    171            // ×¢²á¶Ëµã
    172            afRegister( &Coordinator_epDesc );
   \   000046                ; Setup parameters for call to function afRegister
   \   000046   7A..         MOV     R2,#Coordinator_epDesc & 0xff
   \   000048   7B..         MOV     R3,#(Coordinator_epDesc >> 8) & 0xff
   \   00004A   12....       LCALL   ??afRegister?relay
    173          }
   \   00004D   7F01         MOV     R7,#0x1
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA
    174          
    175          /*********************************************************************
    176           * @fn      SampleApp_ProcessEvent
    177           *
    178           * @brief   Generic Application Task event processor.  This function
    179           *          is called to process all events for the task.  Events
    180           *          include timers, messages and any other user defined events.
    181           *
    182           * @param   task_id  - The OSAL assigned task ID.
    183           * @param   events - events to process.  This is a bit map and can
    184           *                   contain more than one event.
    185           *
    186           * @return  none
    187           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    188          uint8 SendTemperatureIndicate = 1;
   \                     SendTemperatureIndicate:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for SendTemperatureIndicate>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    190          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    191            afIncomingMSGPacket_t *MSGpkt;
    192            (void)task_id;  // Intentionally unreferenced parameter
    193          
    194            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   604F         JZ      ??SampleApp_ProcessEvent_0
    195            {
    196              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8018         SJMP    ??SampleApp_ProcessEvent_1
    197              while ( MSGpkt )
    198              {
    199                switch ( MSGpkt->hdr.event )
    200                {        
    201                  // Received when a messages is received (OTA) for this endpoint
    202                  case AF_INCOMING_MSG_CMD:
    203                    SampleApp_MessageMSGCB( MSGpkt );
    204                    break;
    205          
    206                  // Received whenever the device changes state in the network
    207                  case ZDO_STATE_CHANGE:
    208                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#SampleApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    209                    if(SampleApp_NwkState == DEV_ZB_COORD)
   \   000016   6409         XRL     A,#0x9
   \   000018   7007         JNZ     ??SampleApp_ProcessEvent_3
    210                    {
    211                      printf("coord ready!");
   \   00001A                ; Setup parameters for call to function printf
   \   00001A   7A..         MOV     R2,#`?<Constant "coord ready!">` & 0xff
   \   00001C   7B..         MOV     R3,#(`?<Constant "coord ready!">` >> 8) & 0xff
   \   00001E   12....       LCALL   ??printf?relay
    212                    }
    213                    break;
    214          
    215                  default:
    216                    break;
    217                }
    218          
    219                // Release the memory
    220                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000021                ; Setup parameters for call to function osal_msg_deallocate
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??osal_msg_deallocate?relay
    221          
    222                // Next - if one is available
    223                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000028                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000028   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??osal_msg_receive?relay
   \   000030   8A..         MOV     ?V0 + 2,R2
   \   000032   8B..         MOV     ?V0 + 3,R3
   \   000034   AE..         MOV     R6,?V0 + 2
   \   000036   AF..         MOV     R7,?V0 + 3
   \   000038   EE           MOV     A,R6
   \   000039   4F           ORL     A,R7
   \   00003A   6018         JZ      ??SampleApp_ProcessEvent_4
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   E0           MOVX    A,@DPTR
   \   000041   24E6         ADD     A,#-0x1a
   \   000043   6006         JZ      ??SampleApp_ProcessEvent_5
   \   000045   2449         ADD     A,#0x49
   \   000047   60C7         JZ      ??SampleApp_ProcessEvent_2
   \   000049   80D6         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   00004B                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000052   80CD         SJMP    ??SampleApp_ProcessEvent_3
    224              }
    225          
    226              // return unprocessed events
    227              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000054   AA..         MOV     R2,?V0 + 0
   \   000056   E5..         MOV     A,?V0 + 1
   \   000058   6480         XRL     A,#0x80
   \   00005A   FB           MOV     R3,A
   \   00005B   8004         SJMP    ??SampleApp_ProcessEvent_6
    228            }//if ( events & SYS_EVENT_MSG )
    229          
    230            // Discard unknown events
    231            return 0;
   \                     ??SampleApp_ProcessEvent_0:
   \   00005D   7A00         MOV     R2,#0x0
   \   00005F   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_6:
   \   000061   7F04         MOV     R7,#0x4
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
    232          }
    233          /*********************************************************************
    234           * LOCAL FUNCTIONS
    235           */
    236          
    237          /*********************************************************************
    238           * @fn      SampleApp_MessageMSGCB
    239           *
    240           * @brief   Data message processor callback.  This function processes
    241           *          any incoming data - probably from other devices.  So, based
    242           *          on cluster ID, perform the intended action.
    243           *
    244           * @param   none
    245           *
    246           * @return  none
    247          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    249          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    250            uint8 DispBuf[ ]="signal=0";
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#(`?<Constant "signal=0">` >> 8) & 0xff
   \   000016   7582..       MOV     DPL,#`?<Constant "signal=0">` & 0xff
   \   000019   7409         MOV     A,#0x9
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    251            uint8 Buf[1];
    252            switch ( pkt->clusterId )
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6401         XRL     A,#0x1
   \   000029   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   00002D   7065         JNZ     ??SampleApp_MessageMSGCB_1
    253            {
    254              case SWITCH_CLUSTERID:
    255                  sprintf((void*)DispBuf,(char*)"signal=%d",pkt->cmd.Data[0]);//×ª»»³É×Ö·ûÆ÷
   \   00002F   EA           MOV     A,R2
   \   000030   2421         ADD     A,#0x21
   \   000032   F8           MOV     R0,A
   \   000033   EB           MOV     A,R3
   \   000034   3400         ADDC    A,#0x0
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   FE           MOV     R6,A
   \   000039   E9           MOV     A,R1
   \   00003A   FF           MOV     R7,A
   \   00003B                ; Setup parameters for call to function sprintf
   \   00003B   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00003E   F5..         MOV     ?V0 + 0,A
   \   000040   75..00       MOV     ?V0 + 1,#0x0
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7C..         MOV     R4,#`?<Constant "signal=%d">` & 0xff
   \   00004A   7D..         MOV     R5,#(`?<Constant "signal=%d">` >> 8) & 0xff
   \   00004C   7403         MOV     A,#0x3
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   12....       LCALL   ??sprintf?relay
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
    256          				printf("=%s\r\n",DispBuf);            //´®¿Ú´òÓ¡
   \   00005D                ; Setup parameters for call to function printf
   \   00005D   7401         MOV     A,#0x1
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   8582..       MOV     ?V0 + 0,DPL
   \   000065   8583..       MOV     ?V0 + 1,DPH
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   7A..         MOV     R2,#`?<Constant "=%s\\r\\n">` & 0xff
   \   00006F   7B..         MOV     R3,#(`?<Constant "=%s\\r\\n">` >> 8) & 0xff
   \   000071   12....       LCALL   ??printf?relay
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    257                  //OLED_P8x16Str(0,4,DispBuf);//OLEDÆÁÏÔÊ¾ 
    258                 // ·¢ËÍµ½ÍøÂç
    259                 if(pkt->cmd.Data[0]>0)
   \   000079   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   6004         JZ      ??SampleApp_MessageMSGCB_2
    260                 {
    261                   Buf[0]=0x31;
   \   000084   7431         MOV     A,#0x31
   \   000086   8002         SJMP    ??SampleApp_MessageMSGCB_3
    262                   SendToWiFiNetwork(&Buf[0],1);
    263                 }
    264                 else
    265                 {
    266                   Buf[0]=0x30;
   \                     ??SampleApp_MessageMSGCB_2:
   \   000088   7430         MOV     A,#0x30
   \                     ??SampleApp_MessageMSGCB_3:
   \   00008A   F0           MOVX    @DPTR,A
    267                   SendToWiFiNetwork(&Buf[0],1);
   \   00008B                ; Setup parameters for call to function SendToWiFiNetwork
   \   00008B   7901         MOV     R1,#0x1
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   \   000091   12....       LCALL   ??SendToWiFiNetwork?relay
    268                 }
    269                                          
    270              break;
    271            }
    272          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000094   740A         MOV     A,#0xa
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   7F02         MOV     R7,#0x2
   \   00009B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SendTemperatureIndicate>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalInitTasks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalInitTasks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "coord ready!">`:
   \   000000   636F6F72     DB "coord ready!"
   \            64207265
   \            61647921
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "signal=0">`:
   \   000000   7369676E     DB "signal=0"
   \            616C3D30
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "signal=%d">`:
   \   000000   7369676E     DB "signal=%d"
   \            616C3D25
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "=%s\\r\\n">`:
   \   000000   3D25730D     DB "=%s\015\012"
   \            0A00    
    273          /*********************************************************************
    274          *********************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     SampleApp_Init                  0      0      9
       -> UartInit                   0      0     18
       -> afRegister                 0      0     18
     SampleApp_MessageMSGCB          2      0     34
       -> sprintf                    0      0     44
       -> printf                     0      0     44
       -> SendToWiFiNetwork          0      0     40
       -> SendToWiFiNetwork          0      0     40
     SampleApp_ProcessEvent          0      0     12
       -> osal_msg_receive           0      0     24
       -> printf                     0      0     24
       -> osal_msg_deallocate        0      0     24
       -> osal_msg_receive           0      0     24
       -> SampleApp_MessageMSGCB     0      0     24
     osalInitTasks                   2      0      0
       -> osal_mem_alloc             4      0      0
       -> osal_memset                4      0      0
       -> macTaskInit                4      0      0
       -> nwk_init                   4      0      0
       -> Hal_Init                   4      0      0
       -> APS_Init                   4      0      0
       -> APSF_Init                  4      0      0
       -> ZDApp_Init                 4      0      0
       -> ZDNwkMgr_Init              4      0      0
       -> WiFiGate_Init              4      0      0
       -> SampleApp_Init             4      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     tasksArr                                     18
     tasksCnt                                      1
     tasksEvents                                   2
     osalInitTasks                                80
     InClusterList                                 2
     Coordinator_SimpleDesc                       12
     Coordinator_epDesc                            6
     SampleApp_TaskID                              1
     SampleApp_NwkState                            1
     SampleApp_TransID                             1
     Point_To_Point_DstAddr                       12
     Boardcast_DstAddr                            12
     SampleApp_Init                               82
     SendTemperatureIndicate                       1
     SampleApp_ProcessEvent                      102
     SampleApp_MessageMSGCB                      158
     ?Subroutine0                                 14
     ?<Initializer for SendTemperatureIndicate>    1
     ??osalInitTasks?relay                         6
     ??SampleApp_Init?relay                        6
     ??SampleApp_ProcessEvent?relay                6
     ??SampleApp_MessageMSGCB?relay                6
     ?<Constant "coord ready!">                   13
     ?<Constant "signal=0">                        9
     ?<Constant "signal=%d">                      10
     ?<Constant "=%s\r\n">                         6

 
 436 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  71 bytes in segment XDATA_ROM_C
  35 bytes in segment XDATA_Z
 
 461 bytes of CODE  memory
  71 bytes of CONST memory
  36 bytes of XDATA memory

Errors: none
Warnings: 1
